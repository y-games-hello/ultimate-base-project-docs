{
  "api/UBP.Scripts.ApplicationEntry.html": {
    "href": "api/UBP.Scripts.ApplicationEntry.html",
    "title": "Class ApplicationEntry | Ultimate Base Project",
    "keywords": "Class ApplicationEntry The application's startup entry point, invoked automatically when the game is launched. Responsible for initializing configuration and service layers, then loading the game intro scene. Inheritance object ApplicationEntry Namespace : UBP Scripts Assembly : .dll Syntax public class ApplicationEntry"
  },
  "api/UBP.Scripts.Data.AssetLoader.html": {
    "href": "api/UBP.Scripts.Data.AssetLoader.html",
    "title": "Class AssetLoader | Ultimate Base Project",
    "keywords": "Class AssetLoader Centralized utility class for loading assets using Unity's Resources or Addressables APIs. Provides async and sync loading methods for assets and scenes. Inheritance object AssetLoader Namespace : UBP Scripts Data Assembly : .dll Syntax public static class AssetLoader Methods LoadResourcesAssetAsync<T>(string) Asynchronously loads an asset from the Resources folder. Declaration public static Task<T> LoadResourcesAssetAsync<T>(string assetPath) where T : Object Parameters Type Name Description string assetPath Returns Type Description System.Threading.Tasks.Task<TResult> Type Parameters Name Description T LoadResourcesAsset<T>(string) Asynchronously loads an asset from the Resources folder. Declaration public static T LoadResourcesAsset<T>(string assetPath) where T : Object Parameters Type Name Description string assetPath Returns Type Description T Type Parameters Name Description T LoadResourcesAssets<T>(string) Synchronously loads all assets of type T from the specified folder in Resources. Declaration public static IList<T> LoadResourcesAssets<T>(string rootFolderPath) where T : Object Parameters Type Name Description string rootFolderPath Returns Type Description System.Collections.Generic.IList<T> Type Parameters Name Description T"
  },
  "api/UBP.Scripts.Data.Configs.DataConfig.html": {
    "href": "api/UBP.Scripts.Data.Configs.DataConfig.html",
    "title": "Class DataConfig | Ultimate Base Project",
    "keywords": "Class DataConfig Inheritance object Object ScriptableObject DataConfig Namespace : UBP Scripts Data Configs Assembly : .dll Syntax [CreateAssetMenu(fileName = \"DataConfig\", menuName = \"Configs/DataConfig\")] public class DataConfig : ScriptableObject Properties ConfigsPath Declaration public string ConfigsPath { get; } Property Value Type Description string"
  },
  "api/UBP.Scripts.Data.Configs.GeneralConfig.html": {
    "href": "api/UBP.Scripts.Data.Configs.GeneralConfig.html",
    "title": "Class GeneralConfig | Ultimate Base Project",
    "keywords": "Class GeneralConfig Inheritance object Object ScriptableObject GeneralConfig Namespace : UBP Scripts Data Configs Assembly : .dll Syntax [CreateAssetMenu(fileName = \"GeneralConfig\", menuName = \"Configs/GeneralConfig\")] public class GeneralConfig : ScriptableObject"
  },
  "api/UBP.Scripts.Data.Configs.html": {
    "href": "api/UBP.Scripts.Data.Configs.html",
    "title": "Namespace UBP.Scripts.Data.Configs | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.Data.Configs Classes DataConfig GeneralConfig"
  },
  "api/UBP.Scripts.Data.ConfigStorage.html": {
    "href": "api/UBP.Scripts.Data.ConfigStorage.html",
    "title": "Class ConfigStorage | Ultimate Base Project",
    "keywords": "Class ConfigStorage Singleton-based storage for all project configuration assets loaded at runtime. Automatically loads configs via the selected IConfigLoader implementation. Inheritance object ConfigStorage Namespace : UBP Scripts Data Assembly : .dll Syntax public class ConfigStorage Methods CreateAsync() Declaration public static Task CreateAsync() Returns Type Description System.Threading.Tasks.Task GetConfig<T>() Returns the first config of type T if available. Declaration public static T GetConfig<T>() where T : ScriptableObject Returns Type Description T The config instance, or null if not found. Type Parameters Name Description T The type of the config to retrieve. GetConfigs<T>() Returns all configs of type T found in the cache. Declaration public static List<T> GetConfigs<T>() where T : ScriptableObject Returns Type Description System.Collections.Generic.List<T> A list of matching config instances. Type Parameters Name Description T The type of the configs to retrieve."
  },
  "api/UBP.Scripts.Data.html": {
    "href": "api/UBP.Scripts.Data.html",
    "title": "Namespace UBP.Scripts.Data | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.Data Classes AssetLoader Centralized utility class for loading assets using Unity's Resources or Addressables APIs. Provides async and sync loading methods for assets and scenes. ConfigStorage Singleton-based storage for all project configuration assets loaded at runtime. Automatically loads configs via the selected IConfigLoader implementation. ResourcesConfigLoader Loads configuration assets (e.g. ScriptableObjects) from the Unity Resources folder at runtime. Implements IConfigLoader for use in the UBP configuration system. Interfaces IConfigLoader Defines an interface for asynchronously loading configuration assets such as ScriptableObject s. This abstraction allows support for different loading backends (e.g. Resources, Addressables, Web)."
  },
  "api/UBP.Scripts.Data.IConfigLoader.html": {
    "href": "api/UBP.Scripts.Data.IConfigLoader.html",
    "title": "Interface IConfigLoader | Ultimate Base Project",
    "keywords": "Interface IConfigLoader Defines an interface for asynchronously loading configuration assets such as ScriptableObject s. This abstraction allows support for different loading backends (e.g. Resources, Addressables, Web). Namespace : UBP Scripts Data Assembly : .dll Syntax public interface IConfigLoader Methods InitializeAsync() Performs any asynchronous initialization needed by the loader. Declaration Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task LoadConfigsAsync() Loads and returns all configuration ScriptableObject s. Declaration Task<IList<ScriptableObject>> LoadConfigsAsync() Returns Type Description System.Threading.Tasks.Task<TResult> System.Collections.Generic.IList<T> ScriptableObject A list of configuration assets."
  },
  "api/UBP.Scripts.Data.ResourcesConfigLoader.html": {
    "href": "api/UBP.Scripts.Data.ResourcesConfigLoader.html",
    "title": "Class ResourcesConfigLoader | Ultimate Base Project",
    "keywords": "Class ResourcesConfigLoader Loads configuration assets (e.g. ScriptableObjects) from the Unity Resources folder at runtime. Implements IConfigLoader for use in the UBP configuration system. Inheritance object ResourcesConfigLoader Implements IConfigLoader Namespace : UBP Scripts Data Assembly : .dll Syntax public class ResourcesConfigLoader : IConfigLoader Constructors ResourcesConfigLoader(string) Creates a new loader that will search for config assets under the specified Resources path. Declaration public ResourcesConfigLoader(string rootPath) Parameters Type Name Description string rootPath Relative path under Resources/ where configuration assets are stored. Methods InitializeAsync() Performs any asynchronous initialization needed by the loader. Declaration public Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task LoadConfigsAsync() Loads all ScriptableObject configs found at the root path inside the Resources folder. Declaration public Task<IList<ScriptableObject>> LoadConfigsAsync() Returns Type Description System.Threading.Tasks.Task<TResult> System.Collections.Generic.IList<T> ScriptableObject A list of deserialized config objects. Implements IConfigLoader"
  },
  "api/UBP.Scripts.Editor.EditorApplicationEntry.html": {
    "href": "api/UBP.Scripts.Editor.EditorApplicationEntry.html",
    "title": "Class EditorApplicationEntry | Ultimate Base Project",
    "keywords": "Class EditorApplicationEntry Automatically sets the play mode start scene in the Unity Editor to the first scene listed in build settings. Ensures a consistent and controlled entry point for testing and development. Inheritance object EditorApplicationEntry Namespace : UBP Scripts Editor Assembly : .dll Syntax [InitializeOnLoad] public static class EditorApplicationEntry"
  },
  "api/UBP.Scripts.Editor.html": {
    "href": "api/UBP.Scripts.Editor.html",
    "title": "Namespace UBP.Scripts.Editor | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.Editor Classes EditorApplicationEntry Automatically sets the play mode start scene in the Unity Editor to the first scene listed in build settings. Ensures a consistent and controlled entry point for testing and development."
  },
  "api/UBP.Scripts.Extensions.BoundedQueue-1.html": {
    "href": "api/UBP.Scripts.Extensions.BoundedQueue-1.html",
    "title": "Class BoundedQueue<T> | Ultimate Base Project",
    "keywords": "Class BoundedQueue<T> A fixed-capacity queue that discards the oldest element when new items are added beyond the limit. Useful for logs, history buffers, and rolling data windows. Inheritance object BoundedQueue<T> Namespace : UBP Scripts Extensions Assembly : .dll Syntax public class BoundedQueue<T> Type Parameters Name Description T The type of elements stored in the queue. Constructors BoundedQueue(int) Initializes a new instance of the BoundedQueue<T> class with a fixed capacity. Declaration public BoundedQueue(int capacity) Parameters Type Name Description int capacity The maximum number of items the queue can hold. Properties Count Declaration public int Count { get; } Property Value Type Description int Methods Clear() Declaration public void Clear() Enqueue(T) Declaration public void Enqueue(T item) Parameters Type Name Description T item GetEnumerator() Returns an enumerator that iterates through the queue. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator<T> ToArray() Declaration public T[] ToArray() Returns Type Description"
  },
  "api/UBP.Scripts.Extensions.html": {
    "href": "api/UBP.Scripts.Extensions.html",
    "title": "Namespace UBP.Scripts.Extensions | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.Extensions Classes BoundedQueue<T> A fixed-capacity queue that discards the oldest element when new items are added beyond the limit. Useful for logs, history buffers, and rolling data windows. TaskExtensions UIExtensions"
  },
  "api/UBP.Scripts.Extensions.TaskExtensions.html": {
    "href": "api/UBP.Scripts.Extensions.TaskExtensions.html",
    "title": "Class TaskExtensions | Ultimate Base Project",
    "keywords": "Class TaskExtensions Inheritance object TaskExtensions Namespace : UBP Scripts Extensions Assembly : .dll Syntax public static class TaskExtensions Methods ToCoroutine(Task) Converts a System.Threading.Tasks.Task into a coroutine so it can be yielded inside Unity coroutines. Declaration public static IEnumerator ToCoroutine(this Task task) Parameters Type Name Description System.Threading.Tasks.Task task The task to convert. Returns Type Description System.Collections.IEnumerator An IEnumerator that yields until the task completes. ToTask(AsyncOperation) Converts a Unity AsyncOperation into a System.Threading.Tasks.Task , enabling use with async/await. Declaration public static Task ToTask(this AsyncOperation operation) Parameters Type Name Description AsyncOperation operation The Unity async operation to wrap. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when the operation finishes. ToTask(ResourceRequest) Converts a Unity ResourceRequest into a System.Threading.Tasks.Task , allowing use with async/await. Declaration public static Task ToTask(this ResourceRequest request) Parameters Type Name Description ResourceRequest request The ResourceRequest to wait for. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when the request finishes."
  },
  "api/UBP.Scripts.Extensions.UIExtensions.html": {
    "href": "api/UBP.Scripts.Extensions.UIExtensions.html",
    "title": "Class UIExtensions | Ultimate Base Project",
    "keywords": "Class UIExtensions Inheritance object UIExtensions Namespace : UBP Scripts Extensions Assembly : .dll Syntax public static class UIExtensions Methods GetPositionInsideRectTransform(RectTransform, RectTransform) Declaration public static Vector2 GetPositionInsideRectTransform(this RectTransform target, RectTransform parentRectTransform) Parameters Type Name Description RectTransform target RectTransform parentRectTransform Returns Type Description Vector2"
  },
  "api/UBP.Scripts.html": {
    "href": "api/UBP.Scripts.html",
    "title": "Namespace UBP.Scripts | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts Classes ApplicationEntry The application's startup entry point, invoked automatically when the game is launched. Responsible for initializing configuration and service layers, then loading the game intro scene. UBPConstants"
  },
  "api/UBP.Scripts.UBPConstants.html": {
    "href": "api/UBP.Scripts.UBPConstants.html",
    "title": "Class UBPConstants | Ultimate Base Project",
    "keywords": "Class UBPConstants Inheritance object UBPConstants Namespace : UBP Scripts Assembly : .dll Syntax public static class UBPConstants Properties ConfigsRoot Declaration public static string ConfigsRoot { get; } Property Value Type Description string UBPPrefix Declaration public static string UBPPrefix { get; } Property Value Type Description string"
  },
  "api/UBP.Scripts.UBPServices.ApplicationEvents.ApplicationEventsDispatcher.html": {
    "href": "api/UBP.Scripts.UBPServices.ApplicationEvents.ApplicationEventsDispatcher.html",
    "title": "Class ApplicationEventsDispatcher | Ultimate Base Project",
    "keywords": "Class ApplicationEventsDispatcher A MonoBehaviour that listens for Unity application events (focus, pause, quit, destroy) and forwards them to the centralized ApplicationEventsService . This enables non-MonoBehaviour systems to respond to Unity lifecycle events. Inheritance object Object Component Behaviour MonoBehaviour ApplicationEventsDispatcher Namespace : UBP Scripts UBPServices ApplicationEvents Assembly : .dll Syntax public class ApplicationEventsDispatcher : MonoBehaviour"
  },
  "api/UBP.Scripts.UBPServices.ApplicationEvents.ApplicationEventsService.html": {
    "href": "api/UBP.Scripts.UBPServices.ApplicationEvents.ApplicationEventsService.html",
    "title": "Class ApplicationEventsService | Ultimate Base Project",
    "keywords": "Class ApplicationEventsService A centralized service that broadcasts application lifecycle events such as pause, focus, quit, and destroy. Allows non-MonoBehaviour systems to subscribe to Unity-level events. Inheritance object ApplicationEventsService Implements IService Namespace : UBP Scripts UBPServices ApplicationEvents Assembly : .dll Syntax public class ApplicationEventsService : IService Fields OnApplicationDestroy Called when the application is destroyed. Declaration public Action OnApplicationDestroy Field Value Type Description System.Action OnApplicationFocus Declaration public Action<bool> OnApplicationFocus Field Value Type Description System.Action<T> bool OnApplicationPause Declaration public Action<bool> OnApplicationPause Field Value Type Description System.Action<T> bool OnApplicationQuit Declaration public Action OnApplicationQuit Field Value Type Description System.Action Methods InitializeAsync() Initializes the application event dispatcher and ensures it persists across scenes. Declaration public Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task Implements IService"
  },
  "api/UBP.Scripts.UBPServices.ApplicationEvents.html": {
    "href": "api/UBP.Scripts.UBPServices.ApplicationEvents.html",
    "title": "Namespace UBP.Scripts.UBPServices.ApplicationEvents | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.ApplicationEvents Classes ApplicationEventsDispatcher A MonoBehaviour that listens for Unity application events (focus, pause, quit, destroy) and forwards them to the centralized ApplicationEventsService . This enables non-MonoBehaviour systems to respond to Unity lifecycle events. ApplicationEventsService A centralized service that broadcasts application lifecycle events such as pause, focus, quit, and destroy. Allows non-MonoBehaviour systems to subscribe to Unity-level events."
  },
  "api/UBP.Scripts.UBPServices.Audio.AudioService.html": {
    "href": "api/UBP.Scripts.UBPServices.Audio.AudioService.html",
    "title": "Class AudioService | Ultimate Base Project",
    "keywords": "Class AudioService Handles audio playback for music and sound effects using a pooled system of AudioSource s. Supports volume control via AudioMixer groups and auto-recycling sources after playback. Inheritance object ConfiguredService AudioServiceConfig AudioService Implements IService Namespace : UBP Scripts UBPServices Audio Assembly : .dll Syntax public class AudioService : ConfiguredService<AudioServiceConfig>, IService Properties ServiceConfig The configuration asset used by the service. Must be provided by the derived class. Declaration public override AudioServiceConfig ServiceConfig { get; } Property Value Type Description AudioServiceConfig Overrides ConfiguredService<AudioServiceConfig>.ServiceConfig Methods InitializeAsync() Initializes the service by creating and configuring the audio source pool. Declaration public override Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task Overrides ConfiguredService<AudioServiceConfig>.InitializeAsync() PlayMusic(AudioClip, float, float, bool) Plays a looping music track using an available audio source. Declaration public AudioSource PlayMusic(AudioClip audioClip, float volume = 1, float pitch = 1, bool loop = true) Parameters Type Name Description AudioClip audioClip The audio clip to play. float volume Playback volume (default: 1.0). float pitch Playback pitch (default: 1.0). bool loop Whether the music should loop (default: true). Returns Type Description AudioSource The AudioSource used to play the music. PlaySFX(AudioClip, Vector3, float, float) Plays a one-shot sound effect (SFX) at a world position with optional volume and pitch. Declaration public AudioSource PlaySFX(AudioClip audioClip, Vector3 position, float volume = 1, float pitch = 1) Parameters Type Name Description AudioClip audioClip The audio clip to play. Vector3 position The world position for 3D sound playback. float volume Playback volume (default: 1.0). float pitch Playback pitch (default: 1.0). Returns Type Description AudioSource The AudioSource used to play the clip. SetMusicVolume(float) Sets the volume for music using the linked AudioMixer group. Declaration public void SetMusicVolume(float volume) Parameters Type Name Description float volume Normalized volume between 0 and 1. Clamped internally. SetSFXVolume(float) Sets the volume for sound effects (SFX) using the linked AudioMixer group. Declaration public void SetSFXVolume(float volume) Parameters Type Name Description float volume Normalized volume between 0 and 1. Clamped internally. Implements IService"
  },
  "api/UBP.Scripts.UBPServices.Audio.AudioServiceConfig.html": {
    "href": "api/UBP.Scripts.UBPServices.Audio.AudioServiceConfig.html",
    "title": "Class AudioServiceConfig | Ultimate Base Project",
    "keywords": "Class AudioServiceConfig Inheritance object Object ScriptableObject AudioServiceConfig Namespace : UBP Scripts UBPServices Audio Assembly : .dll Syntax [CreateAssetMenu(fileName = \"AudioServiceConfig\", menuName = \"Configs/Services/AudioServiceConfig\")] public class AudioServiceConfig : ScriptableObject Properties AudioSourcesPoolSize The number of AudioSource instances to preallocate in the pool. This helps reduce runtime allocations for frequent audio playback. Declaration public int AudioSourcesPoolSize { get; } Property Value Type Description int MusicAudioMixerGroup The AudioMixerGroup used to route music playback audio sources. Declaration public AudioMixerGroup MusicAudioMixerGroup { get; } Property Value Type Description AudioMixerGroup SFXAudioMixerGroup The AudioMixerGroup used to route SFX (sound effects) playback audio sources. Declaration public AudioMixerGroup SFXAudioMixerGroup { get; } Property Value Type Description AudioMixerGroup"
  },
  "api/UBP.Scripts.UBPServices.Audio.AudioSourcesPool.html": {
    "href": "api/UBP.Scripts.UBPServices.Audio.AudioSourcesPool.html",
    "title": "Class AudioSourcesPool | Ultimate Base Project",
    "keywords": "Class AudioSourcesPool A reusable object pool for AudioSource instances. Prevents unnecessary allocation and destruction of AudioSources at runtime. Used internally by the AudioService . Inheritance object Object Component Behaviour MonoBehaviour AudioSourcesPool Namespace : UBP Scripts UBPServices Audio Assembly : .dll Syntax public class AudioSourcesPool : MonoBehaviour Methods GetAudioSource() Retrieves an AudioSource from the pool or creates one if the pool is empty. The AudioSource will be activated and ready for playback. Declaration public AudioSource GetAudioSource() Returns Type Description AudioSource A prepared AudioSource instance. Initialize() Initializes the pool by preallocating a number of AudioSources as defined in the AudioServiceConfig . Declaration public void Initialize() ReleaseAfterPlay(AudioSource) Automatically returns an AudioSource to the pool once it finishes playing. Declaration public void ReleaseAfterPlay(AudioSource source) Parameters Type Name Description AudioSource source The AudioSource that should be recycled. ReturnAudioSource(AudioSource) Returns an AudioSource to the pool after stopping playback and deactivating it. Declaration public void ReturnAudioSource(AudioSource audioSource) Parameters Type Name Description AudioSource audioSource The AudioSource to return to the pool."
  },
  "api/UBP.Scripts.UBPServices.Audio.html": {
    "href": "api/UBP.Scripts.UBPServices.Audio.html",
    "title": "Namespace UBP.Scripts.UBPServices.Audio | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Audio Classes AudioService Handles audio playback for music and sound effects using a pooled system of AudioSource s. Supports volume control via AudioMixer groups and auto-recycling sources after playback. AudioServiceConfig AudioSourcesPool A reusable object pool for AudioSource instances. Prevents unnecessary allocation and destruction of AudioSources at runtime. Used internally by the AudioService ."
  },
  "api/UBP.Scripts.UBPServices.Commands.html": {
    "href": "api/UBP.Scripts.UBPServices.Commands.html",
    "title": "Namespace UBP.Scripts.UBPServices.Commands | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Commands Interfaces ICommand<T> Defines a generic command interface that supports execution and undo operations. Follows the Command Pattern, allowing encapsulated actions with arguments."
  },
  "api/UBP.Scripts.UBPServices.Commands.ICommand-1.html": {
    "href": "api/UBP.Scripts.UBPServices.Commands.ICommand-1.html",
    "title": "Interface ICommand<T> | Ultimate Base Project",
    "keywords": "Interface ICommand<T> Defines a generic command interface that supports execution and undo operations. Follows the Command Pattern, allowing encapsulated actions with arguments. Namespace : UBP Scripts UBPServices Commands Assembly : .dll Syntax public interface ICommand<in T> Type Parameters Name Description T The type of arguments required to execute the command. Methods Execute(T) Executes the command with the given arguments. Declaration void Execute(T arguments) Parameters Type Name Description T arguments The arguments required to execute the command. Undo() Undoes the previously executed command. Declaration void Undo()"
  },
  "api/UBP.Scripts.UBPServices.ConfiguredService-1.html": {
    "href": "api/UBP.Scripts.UBPServices.ConfiguredService-1.html",
    "title": "Class ConfiguredService<TConfig> | Ultimate Base Project",
    "keywords": "Class ConfiguredService<TConfig> A base service implementation that uses a configuration object of type TConfig. Configs are loaded from the Resources folder at runtime. Inheritance object ConfiguredService<TConfig> AudioService DebugService FactoryService SaveService SceneService Implements IService Namespace : UBP Scripts UBPServices Assembly : .dll Syntax public abstract class ConfiguredService<TConfig> : IService where TConfig : ScriptableObject Type Parameters Name Description TConfig The ScriptableObject type used as config. Properties ServiceConfig The configuration asset used by the service. Must be provided by the derived class. Declaration public abstract TConfig ServiceConfig { get; } Property Value Type Description TConfig Methods InitializeAsync() Requires override in derived services to perform async initialization. Declaration public abstract Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task Implements IService"
  },
  "api/UBP.Scripts.UBPServices.Debugs.Console.CommandSuggestionsView.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.Console.CommandSuggestionsView.html",
    "title": "Class CommandSuggestionsView | Ultimate Base Project",
    "keywords": "Class CommandSuggestionsView Manages the UI display and navigation of suggested console commands during input. Allows keyboard navigation and selection using up/down and enter keys. Inheritance object Object Component Behaviour MonoBehaviour CommandSuggestionsView Namespace : UBP Scripts UBPServices Debugs Console Assembly : .dll Syntax public class CommandSuggestionsView : MonoBehaviour Fields OnCommandSelected Declaration public Action<ConsoleCommand> OnCommandSelected Field Value Type Description System.Action<T> ConsoleCommand Properties IsFocused Declaration public bool IsFocused { get; } Property Value Type Description bool Methods DeselectSuggestion() Resets selection state to unfocused (none selected). Declaration public void DeselectSuggestion() NavigateThroughSuggestions(int) Navigates through the suggestion list using the provided direction. Declaration public void NavigateThroughSuggestions(int direction) Parameters Type Name Description int direction -1 for up, 1 for down. SelectSuggestion() Executes the currently selected suggestion and deselects all. Declaration public void SelectSuggestion() Setup(List<ConsoleCommand>) Creates or reuses UI elements to display the given list of command suggestions. Declaration public void Setup(List<ConsoleCommand> commands) Parameters Type Name Description System.Collections.Generic.List<T> ConsoleCommand commands A list of available commands to suggest."
  },
  "api/UBP.Scripts.UBPServices.Debugs.Console.ConsoleCanvas.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.Console.ConsoleCanvas.html",
    "title": "Class ConsoleCanvas | Ultimate Base Project",
    "keywords": "Class ConsoleCanvas Manages the root canvas for the in-game debug console interface. Instantiates and hosts the ConsoleView . Handles cleanup and closing logic for the entire console UI. Inheritance object Object Component Behaviour MonoBehaviour ConsoleCanvas Namespace : UBP Scripts UBPServices Debugs Console Assembly : .dll Syntax public class ConsoleCanvas : MonoBehaviour Methods Close() Declaration public void Close()"
  },
  "api/UBP.Scripts.UBPServices.Debugs.Console.ConsoleInputView.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.Console.ConsoleInputView.html",
    "title": "Class ConsoleInputView | Ultimate Base Project",
    "keywords": "Class ConsoleInputView Manages user input for executing console commands within the debug console interface. Filters and sanitizes user input, handles command suggestion interactions, and executes valid commands. Inheritance object Object Component Behaviour MonoBehaviour ConsoleInputView Namespace : UBP Scripts UBPServices Debugs Console Assembly : .dll Syntax public class ConsoleInputView : MonoBehaviour Properties CanExecuteCommand Determines whether the current input is valid and the user is able to execute a command. Declaration public bool CanExecuteCommand { get; } Property Value Type Description bool Methods TryExecuteCommand() Attempts to parse and execute the command entered by the user. Declaration public void TryExecuteCommand()"
  },
  "api/UBP.Scripts.UBPServices.Debugs.Console.ConsoleView.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.Console.ConsoleView.html",
    "title": "Class ConsoleView | Ultimate Base Project",
    "keywords": "Class ConsoleView Manages the main in-game debug console UI, including input, suggestions, log rendering, and state persistence. Inheritance object Object Component Behaviour MonoBehaviour ConsoleView Namespace : UBP Scripts UBPServices Debugs Console Assembly : .dll Syntax public class ConsoleView : MonoBehaviour Methods Setup(Action) Registers a callback to be invoked when the console is closed. Declaration public void Setup(Action onCloseCallback) Parameters Type Name Description System.Action onCloseCallback Callback to invoke on console close."
  },
  "api/UBP.Scripts.UBPServices.Debugs.Console.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.Console.html",
    "title": "Namespace UBP.Scripts.UBPServices.Debugs.Console | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Debugs.Console Classes CommandSuggestionsView Manages the UI display and navigation of suggested console commands during input. Allows keyboard navigation and selection using up/down and enter keys. ConsoleCanvas Manages the root canvas for the in-game debug console interface. Instantiates and hosts the ConsoleView . Handles cleanup and closing logic for the entire console UI. ConsoleInputView Manages user input for executing console commands within the debug console interface. Filters and sanitizes user input, handles command suggestion interactions, and executes valid commands. ConsoleView Manages the main in-game debug console UI, including input, suggestions, log rendering, and state persistence. SuggestedCommandView Represents a visual UI element for displaying a suggested console command. Handles display and selection highlighting for individual commands in the suggestion list."
  },
  "api/UBP.Scripts.UBPServices.Debugs.Console.SuggestedCommandView.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.Console.SuggestedCommandView.html",
    "title": "Class SuggestedCommandView | Ultimate Base Project",
    "keywords": "Class SuggestedCommandView Represents a visual UI element for displaying a suggested console command. Handles display and selection highlighting for individual commands in the suggestion list. Inheritance object Object Component Behaviour MonoBehaviour SuggestedCommandView Namespace : UBP Scripts UBPServices Debugs Console Assembly : .dll Syntax public class SuggestedCommandView : MonoBehaviour Properties ConsoleCommand Declaration public ConsoleCommand ConsoleCommand { get; } Property Value Type Description ConsoleCommand IsSelected Declaration public bool IsSelected { get; set; } Property Value Type Description bool Methods SetSelected(bool) Sets the visual selection state of the view, updating background color accordingly. Declaration public void SetSelected(bool isSelected) Parameters Type Name Description bool isSelected True to highlight the view, false to use the default color. Setup(ConsoleCommand) Initializes the view with the specified console command and updates its text label. Declaration public void Setup(ConsoleCommand consoleCommand) Parameters Type Name Description ConsoleCommand consoleCommand The command to associate with this view."
  },
  "api/UBP.Scripts.UBPServices.Debugs.ConsoleCommands.ConsoleCommand.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.ConsoleCommands.ConsoleCommand.html",
    "title": "Class ConsoleCommand | Ultimate Base Project",
    "keywords": "Class ConsoleCommand Represents the base class for all in-game console commands. Each command has a name derived from its class name and a set of required argument types. Inheritance object ConsoleCommand SampleConsoleCommand Implements ICommand object Namespace : UBP Scripts UBPServices Debugs ConsoleCommands Assembly : .dll Syntax public abstract class ConsoleCommand : ICommand<object[]> Constructors ConsoleCommand(Type[]) Initializes a new instance of the ConsoleCommand class with specified argument types. Declaration public ConsoleCommand(Type[] requiredArguments) Parameters Type Name Description System.Type requiredArguments An array of types representing the arguments required by the command. Properties Name Gets the name of the command, derived from the class name. Declaration public string Name { get; } Property Value Type Description string RequiredArguments Gets or sets the expected types of arguments this command requires. Declaration public Type[] RequiredArguments { get; protected set; } Property Value Type Description System.Type An array of System.Type indicating argument types. Methods Execute(object[]) Executes the command with the given arguments. Declaration public abstract void Execute(object[] arguments) Parameters Type Name Description object arguments An array of objects representing the arguments passed to the command. GetCommandNameWithArguments() Returns a formatted command name with its required argument types. Declaration public string GetCommandNameWithArguments() Returns Type Description string A string representing the command with its argument type placeholders. Undo() Reverts or undoes the effect of the command if supported. Declaration public abstract void Undo() Implements ICommand<T>"
  },
  "api/UBP.Scripts.UBPServices.Debugs.ConsoleCommands.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.ConsoleCommands.html",
    "title": "Namespace UBP.Scripts.UBPServices.Debugs.ConsoleCommands | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Debugs.ConsoleCommands Classes ConsoleCommand Represents the base class for all in-game console commands. Each command has a name derived from its class name and a set of required argument types. SampleConsoleCommand A sample implementation of ConsoleCommand used for demonstration or testing."
  },
  "api/UBP.Scripts.UBPServices.Debugs.ConsoleCommands.SampleConsoleCommand.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.ConsoleCommands.SampleConsoleCommand.html",
    "title": "Class SampleConsoleCommand | Ultimate Base Project",
    "keywords": "Class SampleConsoleCommand A sample implementation of ConsoleCommand used for demonstration or testing. Inheritance object ConsoleCommand SampleConsoleCommand Implements ICommand object Inherited Members ConsoleCommand.Name ConsoleCommand.RequiredArguments ConsoleCommand.GetCommandNameWithArguments() Namespace : UBP Scripts UBPServices Debugs ConsoleCommands Assembly : .dll Syntax public class SampleConsoleCommand : ConsoleCommand, ICommand<object[]> Constructors SampleConsoleCommand(Type[]) Initializes a new instance of the ConsoleCommand class with specified argument types. Declaration public SampleConsoleCommand(Type[] requiredArguments) Parameters Type Name Description System.Type requiredArguments An array of types representing the arguments required by the command. Methods Execute(object[]) Executes the sample command and logs its invocation with arguments to the Unity console. Declaration public override void Execute(object[] arguments) Parameters Type Name Description object arguments The arguments passed to the command. Overrides ConsoleCommand.Execute(object[]) Undo() Reverts or undoes the effect of the command if supported. Declaration public override void Undo() Overrides ConsoleCommand.Undo() Implements ICommand<T>"
  },
  "api/UBP.Scripts.UBPServices.Debugs.DebugService.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.DebugService.html",
    "title": "Class DebugService | Ultimate Base Project",
    "keywords": "Class DebugService A service that provides runtime debugging functionality during development builds. Handles Unity log message capture, bounded log queue storage, and in-game console UI with command registration. Inheritance object ConfiguredService DebugServiceConfig DebugService Implements IService IUpdatable Namespace : UBP Scripts UBPServices Debugs Assembly : .dll Syntax public class DebugService : ConfiguredService<DebugServiceConfig>, IService, IUpdatable Fields OnLogMessageReceived Event triggered when a new log message is received. Declaration public Action<LogMessageData> OnLogMessageReceived Field Value Type Description System.Action<T> LogMessageData Properties ConsoleCommands Gets the registered set of console commands. Declaration public HashSet<ConsoleCommand> ConsoleCommands { get; } Property Value Type Description System.Collections.Generic.HashSet<T> ConsoleCommand LogMessagesQueue Gets a bounded queue that stores recent log messages. Declaration public BoundedQueue<LogMessageData> LogMessagesQueue { get; } Property Value Type Description BoundedQueue LogMessageData ServiceConfig Returns the configuration associated with the debug service. Declaration public override DebugServiceConfig ServiceConfig { get; } Property Value Type Description DebugServiceConfig Overrides ConfiguredService<DebugServiceConfig>.ServiceConfig Methods InitializeAsync() Asynchronously initializes the service, registering log handlers and setting up internal structures. Declaration public override Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task Overrides ConfiguredService<DebugServiceConfig>.InitializeAsync() RegisterCommand(ConsoleCommand) Registers a new console command for use in the in-game debug console. Declaration public void RegisterCommand(ConsoleCommand command) Parameters Type Name Description ConsoleCommand command The command to register. UnregisterCommand(ConsoleCommand) Unregisters a console command, removing it from the console interface. Declaration public void UnregisterCommand(ConsoleCommand command) Parameters Type Name Description ConsoleCommand command The command to unregister. Update() Called every frame to listen for input and toggle the console UI if applicable. Declaration public void Update() Implements IService IUpdatable"
  },
  "api/UBP.Scripts.UBPServices.Debugs.DebugServiceConfig.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.DebugServiceConfig.html",
    "title": "Class DebugServiceConfig | Ultimate Base Project",
    "keywords": "Class DebugServiceConfig Inheritance object Object ScriptableObject DebugServiceConfig Namespace : UBP Scripts UBPServices Debugs Assembly : .dll Syntax [CreateAssetMenu(fileName = \"DebugServiceConfig\", menuName = \"Configs/Services/DebugServiceConfig\")] public class DebugServiceConfig : ScriptableObject Properties ConsoleCanvasPrefab Prefab of the console UI canvas shown in play mode. Declaration public ConsoleCanvas ConsoleCanvasPrefab { get; } Property Value Type Description ConsoleCanvas ErrorMessageColor Declaration public Color ErrorMessageColor { get; } Property Value Type Description Color LogMessageColor Declaration public Color LogMessageColor { get; } Property Value Type Description Color MaxLogMessagesCapacity Maximum number of log messages retained in the debug console. Older messages are discarded when capacity is exceeded. Declaration public int MaxLogMessagesCapacity { get; set; } Property Value Type Description int OpenConsoleKey Key used to toggle the console window at runtime. Declaration public KeyCode OpenConsoleKey { get; } Property Value Type Description KeyCode WarningMessageColor Declaration public Color WarningMessageColor { get; } Property Value Type Description Color"
  },
  "api/UBP.Scripts.UBPServices.Debugs.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.html",
    "title": "Namespace UBP.Scripts.UBPServices.Debugs | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Debugs Classes DebugService A service that provides runtime debugging functionality during development builds. Handles Unity log message capture, bounded log queue storage, and in-game console UI with command registration. DebugServiceConfig LogMessageData Represents a structured container for Unity log message data. LogMessageView Represents a single log message entry in the debug console. Displays the log type, message content, stack trace, and applies coloring/styling."
  },
  "api/UBP.Scripts.UBPServices.Debugs.LogMessageData.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.LogMessageData.html",
    "title": "Class LogMessageData | Ultimate Base Project",
    "keywords": "Class LogMessageData Represents a structured container for Unity log message data. Inheritance object LogMessageData Namespace : UBP Scripts UBPServices Debugs Assembly : .dll Syntax public class LogMessageData Constructors LogMessageData(string, string, LogType) Initializes a new instance of the LogMessageData class with the specified log data. Declaration public LogMessageData(string condition, string stackTrace, LogType type) Parameters Type Name Description string condition The main message or condition of the log entry. string stackTrace The stack trace related to the log message. LogType type The severity or category of the log message. Properties Condition Declaration public string Condition { get; } Property Value Type Description string StackTrace Declaration public string StackTrace { get; } Property Value Type Description string Type Declaration public LogType Type { get; } Property Value Type Description LogType"
  },
  "api/UBP.Scripts.UBPServices.Debugs.LogMessageView.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.LogMessageView.html",
    "title": "Class LogMessageView | Ultimate Base Project",
    "keywords": "Class LogMessageView Represents a single log message entry in the debug console. Displays the log type, message content, stack trace, and applies coloring/styling. Inheritance object Object Component Behaviour MonoBehaviour LogMessageView Namespace : UBP Scripts UBPServices Debugs Assembly : .dll Syntax public class LogMessageView : MonoBehaviour Methods Setup(LogMessageData) Initializes the view with a log message's content and visual formatting. Declaration public void Setup(LogMessageData logMessageData) Parameters Type Name Description LogMessageData logMessageData Data containing log type, message, and stack trace."
  },
  "api/UBP.Scripts.UBPServices.Editor.CoreSettingCategory.html": {
    "href": "api/UBP.Scripts.UBPServices.Editor.CoreSettingCategory.html",
    "title": "Class CoreSettingCategory | Ultimate Base Project",
    "keywords": "Class CoreSettingCategory Represents a static configuration section (like General or Data). Inheritance object SettingCategory CoreSettingCategory Inherited Members SettingCategory.DisplayName SettingCategory.ConfigPath Namespace : UBP Scripts UBPServices Editor Assembly : .dll Syntax public class CoreSettingCategory : SettingCategory Constructors CoreSettingCategory(string, string) Declaration public CoreSettingCategory(string displayName, string configPath) Parameters Type Name Description string displayName string configPath"
  },
  "api/UBP.Scripts.UBPServices.Editor.html": {
    "href": "api/UBP.Scripts.UBPServices.Editor.html",
    "title": "Namespace UBP.Scripts.UBPServices.Editor | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Editor Classes CoreSettingCategory Represents a static configuration section (like General or Data). ServiceSettingCategory Represents a dynamic service-based configuration section discovered at runtime. SettingCategory Base class for defining configurable categories shown in the sidebar of the UBP editor window. UltimateBaseProjectWindow A custom Unity Editor window for configuring UBP service settings and core configurations. Mimics Unity's Project Settings UI with a category list on the left and settings panel on the right."
  },
  "api/UBP.Scripts.UBPServices.Editor.ServiceSettingCategory.html": {
    "href": "api/UBP.Scripts.UBPServices.Editor.ServiceSettingCategory.html",
    "title": "Class ServiceSettingCategory | Ultimate Base Project",
    "keywords": "Class ServiceSettingCategory Represents a dynamic service-based configuration section discovered at runtime. Inheritance object SettingCategory ServiceSettingCategory Inherited Members SettingCategory.DisplayName SettingCategory.ConfigPath Namespace : UBP Scripts UBPServices Editor Assembly : .dll Syntax public class ServiceSettingCategory : SettingCategory Constructors ServiceSettingCategory(string, string) Declaration public ServiceSettingCategory(string displayName, string configPath) Parameters Type Name Description string displayName string configPath"
  },
  "api/UBP.Scripts.UBPServices.Editor.SettingCategory.html": {
    "href": "api/UBP.Scripts.UBPServices.Editor.SettingCategory.html",
    "title": "Class SettingCategory | Ultimate Base Project",
    "keywords": "Class SettingCategory Base class for defining configurable categories shown in the sidebar of the UBP editor window. Inheritance object SettingCategory CoreSettingCategory ServiceSettingCategory Namespace : UBP Scripts UBPServices Editor Assembly : .dll Syntax public abstract class SettingCategory Constructors SettingCategory(string, string) Declaration public SettingCategory(string displayName, string configPath) Parameters Type Name Description string displayName string configPath Properties ConfigPath The Resources path to the ScriptableObject config for this category. Declaration public string ConfigPath { get; } Property Value Type Description string DisplayName The display name shown in the sidebar. Declaration public string DisplayName { get; } Property Value Type Description string"
  },
  "api/UBP.Scripts.UBPServices.Editor.UltimateBaseProjectWindow.html": {
    "href": "api/UBP.Scripts.UBPServices.Editor.UltimateBaseProjectWindow.html",
    "title": "Class UltimateBaseProjectWindow | Ultimate Base Project",
    "keywords": "Class UltimateBaseProjectWindow A custom Unity Editor window for configuring UBP service settings and core configurations. Mimics Unity's Project Settings UI with a category list on the left and settings panel on the right. Inheritance object Object ScriptableObject EditorWindow UltimateBaseProjectWindow Namespace : UBP Scripts UBPServices Editor Assembly : .dll Syntax public class UltimateBaseProjectWindow : EditorWindow Methods ShowWindow() Opens the UBP settings window from the Unity top menu. Declaration [MenuItem(\"Window/YGames/Ultimate Base Project\")] public static void ShowWindow()"
  },
  "api/UBP.Scripts.UBPServices.Factory.FactoryService.html": {
    "href": "api/UBP.Scripts.UBPServices.Factory.FactoryService.html",
    "title": "Class FactoryService | Ultimate Base Project",
    "keywords": "Class FactoryService A service responsible for automatically injecting dependencies or running post-processing logic on objects, using registered IPostProcessor implementations. Inheritance object ConfiguredService FactoryServiceConfig FactoryService Implements IService Namespace : UBP Scripts UBPServices Factory Assembly : .dll Syntax public class FactoryService : ConfiguredService<FactoryServiceConfig>, IService Properties ServiceConfig Returns the configuration associated with the factory service. Declaration public override FactoryServiceConfig ServiceConfig { get; } Property Value Type Description FactoryServiceConfig Overrides ConfiguredService<FactoryServiceConfig>.ServiceConfig Methods InitializeAsync() Initializes the service by discovering and registering all IPostProcessor implementations. Declaration public override Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task Overrides ConfiguredService<FactoryServiceConfig>.InitializeAsync() InjectDependency(object) Applies all registered IPostProcessor instances to the given target object. This is commonly used for dependency injection or object decoration. Declaration public void InjectDependency(object target) Parameters Type Name Description object target The object to process. Implements IService"
  },
  "api/UBP.Scripts.UBPServices.Factory.FactoryServiceConfig.html": {
    "href": "api/UBP.Scripts.UBPServices.Factory.FactoryServiceConfig.html",
    "title": "Class FactoryServiceConfig | Ultimate Base Project",
    "keywords": "Class FactoryServiceConfig Inheritance object Object ScriptableObject FactoryServiceConfig Namespace : UBP Scripts UBPServices Factory Assembly : .dll Syntax [CreateAssetMenu(fileName = \"FactoryServiceConfig\", menuName = \"Configs/Services/FactoryServiceConfig\")] public class FactoryServiceConfig : ScriptableObject"
  },
  "api/UBP.Scripts.UBPServices.Factory.html": {
    "href": "api/UBP.Scripts.UBPServices.Factory.html",
    "title": "Namespace UBP.Scripts.UBPServices.Factory | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Factory Classes FactoryService A service responsible for automatically injecting dependencies or running post-processing logic on objects, using registered IPostProcessor implementations. FactoryServiceConfig"
  },
  "api/UBP.Scripts.UBPServices.Factory.PostProcessors.html": {
    "href": "api/UBP.Scripts.UBPServices.Factory.PostProcessors.html",
    "title": "Namespace UBP.Scripts.UBPServices.Factory.PostProcessors | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Factory.PostProcessors Classes UpdaterPostProcessor Registers any object that implements one of the update-related interfaces with the UpdaterService . This allows non-MonoBehaviour objects to receive Update , FixedUpdate , or LateUpdate events. Interfaces IPostProcessor Interface used by the FactoryService to define post-construction behavior for objects. Implementations can inject dependencies, register systems, or perform other setup logic."
  },
  "api/UBP.Scripts.UBPServices.Factory.PostProcessors.IPostProcessor.html": {
    "href": "api/UBP.Scripts.UBPServices.Factory.PostProcessors.IPostProcessor.html",
    "title": "Interface IPostProcessor | Ultimate Base Project",
    "keywords": "Interface IPostProcessor Interface used by the FactoryService to define post-construction behavior for objects. Implementations can inject dependencies, register systems, or perform other setup logic. Namespace : UBP Scripts UBPServices Factory PostProcessors Assembly : .dll Syntax public interface IPostProcessor Methods Process(object) Processes the specified object after creation or injection. Declaration void Process(object target) Parameters Type Name Description object target The object to process."
  },
  "api/UBP.Scripts.UBPServices.Factory.PostProcessors.UpdaterPostProcessor.html": {
    "href": "api/UBP.Scripts.UBPServices.Factory.PostProcessors.UpdaterPostProcessor.html",
    "title": "Class UpdaterPostProcessor | Ultimate Base Project",
    "keywords": "Class UpdaterPostProcessor Registers any object that implements one of the update-related interfaces with the UpdaterService . This allows non-MonoBehaviour objects to receive Update , FixedUpdate , or LateUpdate events. Inheritance object UpdaterPostProcessor Implements IPostProcessor Namespace : UBP Scripts UBPServices Factory PostProcessors Assembly : .dll Syntax public class UpdaterPostProcessor : IPostProcessor Methods Process(object) Processes the specified object after creation or injection. Declaration public void Process(object target) Parameters Type Name Description object target The object to process. Implements IPostProcessor"
  },
  "api/UBP.Scripts.UBPServices.html": {
    "href": "api/UBP.Scripts.UBPServices.html",
    "title": "Namespace UBP.Scripts.UBPServices | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices Classes ConfiguredService<TConfig> A base service implementation that uses a configuration object of type TConfig. Configs are loaded from the Resources folder at runtime. Services Global manager for all registered services implementing IService. Handles service discovery, initialization, and access. Interfaces IService Base interface for all UBP services. Services are auto-registered and initialized on application startup."
  },
  "api/UBP.Scripts.UBPServices.IService.html": {
    "href": "api/UBP.Scripts.UBPServices.IService.html",
    "title": "Interface IService | Ultimate Base Project",
    "keywords": "Interface IService Base interface for all UBP services. Services are auto-registered and initialized on application startup. Namespace : UBP Scripts UBPServices Assembly : .dll Syntax public interface IService Methods InitializeAsync() Initializes the service asynchronously. This is called automatically after all services are registered. Declaration Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task"
  },
  "api/UBP.Scripts.UBPServices.Saves.Editor.html": {
    "href": "api/UBP.Scripts.UBPServices.Saves.Editor.html",
    "title": "Namespace UBP.Scripts.UBPServices.Saves.Editor | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Saves.Editor Classes SaveServiceConfigEditor"
  },
  "api/UBP.Scripts.UBPServices.Saves.Editor.SaveServiceConfigEditor.html": {
    "href": "api/UBP.Scripts.UBPServices.Saves.Editor.SaveServiceConfigEditor.html",
    "title": "Class SaveServiceConfigEditor | Ultimate Base Project",
    "keywords": "Class SaveServiceConfigEditor Inheritance object Object ScriptableObject Editor SaveServiceConfigEditor Namespace : UBP Scripts UBPServices Saves Editor Assembly : .dll Syntax [CustomEditor(typeof(SaveServiceConfig))] public class SaveServiceConfigEditor : Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides Editor.OnInspectorGUI()"
  },
  "api/UBP.Scripts.UBPServices.Saves.html": {
    "href": "api/UBP.Scripts.UBPServices.Saves.html",
    "title": "Namespace UBP.Scripts.UBPServices.Saves | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Saves Classes SaveService A service for saving and loading persistent game data to disk. Supports serialization, backup recovery, and async file IO. SaveServiceConfig"
  },
  "api/UBP.Scripts.UBPServices.Saves.SaveService.html": {
    "href": "api/UBP.Scripts.UBPServices.Saves.SaveService.html",
    "title": "Class SaveService | Ultimate Base Project",
    "keywords": "Class SaveService A service for saving and loading persistent game data to disk. Supports serialization, backup recovery, and async file IO. Inheritance object ConfiguredService SaveServiceConfig SaveService Implements IService Namespace : UBP Scripts UBPServices Saves Assembly : .dll Syntax public class SaveService : ConfiguredService<SaveServiceConfig>, IService Properties ServiceConfig Returns the active config used by this service. Declaration public override SaveServiceConfig ServiceConfig { get; } Property Value Type Description SaveServiceConfig Overrides ConfiguredService<SaveServiceConfig>.ServiceConfig Methods InitializeAsync() Initializes the service and sets the default serializer. Declaration public override Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task Overrides ConfiguredService<SaveServiceConfig>.InitializeAsync() LoadAsync<T>(string) Attempts to load and deserialize data asynchronously. Falls back to backup file if the main file is missing or corrupted. Declaration public Task<T> LoadAsync<T>(string fileName) Parameters Type Name Description string fileName Returns Type Description System.Threading.Tasks.Task<TResult> Type Parameters Name Description T Load<T>(string) Synchronously loads and deserializes data from a save file or its backup. Declaration public T Load<T>(string fileName) Parameters Type Name Description string fileName Returns Type Description T Type Parameters Name Description T SaveAsync<T>(string, T) Saves data asynchronously, using a temporary file first and falling back to a backup system. Declaration public Task SaveAsync<T>(string fileName, T data) Parameters Type Name Description string fileName The save file name (without extension). T data The data object to save. Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T The type of data to serialize. Save<T>(string, T) Synchronously saves data using the same logic as async, including backup handling. Declaration public void Save<T>(string fileName, T data) Parameters Type Name Description string fileName The save file name (without extension). T data The data object to save. Type Parameters Name Description T The type of data to serialize. Implements IService"
  },
  "api/UBP.Scripts.UBPServices.Saves.SaveServiceConfig.html": {
    "href": "api/UBP.Scripts.UBPServices.Saves.SaveServiceConfig.html",
    "title": "Class SaveServiceConfig | Ultimate Base Project",
    "keywords": "Class SaveServiceConfig Inheritance object Object ScriptableObject SaveServiceConfig Namespace : UBP Scripts UBPServices Saves Assembly : .dll Syntax [CreateAssetMenu(fileName = \"SaveServiceConfig\", menuName = \"Configs/Services/SaveServiceConfig\")] public class SaveServiceConfig : ScriptableObject Properties SavesRootFolder The root folder name under Application.persistentDataPath where save files will be stored. Declaration public string SavesRootFolder { get; } Property Value Type Description string Methods ShowSaveRootFolder() Declaration public void ShowSaveRootFolder()"
  },
  "api/UBP.Scripts.UBPServices.Saves.Serializers.html": {
    "href": "api/UBP.Scripts.UBPServices.Saves.Serializers.html",
    "title": "Namespace UBP.Scripts.UBPServices.Saves.Serializers | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Saves.Serializers Classes JSONSaveSerializer Default JSON-based implementation of SaveSerializer using Unity's built-in JsonUtility. Suitable for simple data structures that follow Unity's serialization rules. SaveSerializer Abstract base class for implementing different save data serialization formats. Allows plugging in custom serializers like JSON, binary, XML, etc."
  },
  "api/UBP.Scripts.UBPServices.Saves.Serializers.JSONSaveSerializer.html": {
    "href": "api/UBP.Scripts.UBPServices.Saves.Serializers.JSONSaveSerializer.html",
    "title": "Class JSONSaveSerializer | Ultimate Base Project",
    "keywords": "Class JSONSaveSerializer Default JSON-based implementation of SaveSerializer using Unity's built-in JsonUtility. Suitable for simple data structures that follow Unity's serialization rules. Inheritance object SaveSerializer JSONSaveSerializer Namespace : UBP Scripts UBPServices Saves Serializers Assembly : .dll Syntax [Serializable] public class JSONSaveSerializer : SaveSerializer Methods Deserialize<T>(string) Deserializes a string into an object of type T. Declaration public override T Deserialize<T>(string data) Parameters Type Name Description string data The serialized string. Returns Type Description T The deserialized object, or default if failed. Type Parameters Name Description T The type to deserialize into. Overrides SaveSerializer.Deserialize<T>(string) Serialize<T>(T) Declaration public override string Serialize<T>(T data) Parameters Type Name Description T data Returns Type Description string Type Parameters Name Description T Overrides SaveSerializer.Serialize<T>(T)"
  },
  "api/UBP.Scripts.UBPServices.Saves.Serializers.SaveSerializer.html": {
    "href": "api/UBP.Scripts.UBPServices.Saves.Serializers.SaveSerializer.html",
    "title": "Class SaveSerializer | Ultimate Base Project",
    "keywords": "Class SaveSerializer Abstract base class for implementing different save data serialization formats. Allows plugging in custom serializers like JSON, binary, XML, etc. Inheritance object SaveSerializer JSONSaveSerializer Namespace : UBP Scripts UBPServices Saves Serializers Assembly : .dll Syntax [Serializable] public abstract class SaveSerializer Methods Deserialize<T>(string) Deserializes a string into an object of type T. Declaration public abstract T Deserialize<T>(string data) Parameters Type Name Description string data The serialized string. Returns Type Description T The deserialized object, or default if failed. Type Parameters Name Description T The type to deserialize into. Serialize<T>(T) Declaration public abstract string Serialize<T>(T data) Parameters Type Name Description T data Returns Type Description string Type Parameters Name Description T"
  },
  "api/UBP.Scripts.UBPServices.Scenes.html": {
    "href": "api/UBP.Scripts.UBPServices.Scenes.html",
    "title": "Namespace UBP.Scripts.UBPServices.Scenes | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Scenes Classes SceneService Service responsible for loading, unloading, and managing scenes in the project. Supports both synchronous and asynchronous operations, with optional progress callbacks. SceneServiceConfig"
  },
  "api/UBP.Scripts.UBPServices.Scenes.SceneService.html": {
    "href": "api/UBP.Scripts.UBPServices.Scenes.SceneService.html",
    "title": "Class SceneService | Ultimate Base Project",
    "keywords": "Class SceneService Service responsible for loading, unloading, and managing scenes in the project. Supports both synchronous and asynchronous operations, with optional progress callbacks. Inheritance object ConfiguredService SceneServiceConfig SceneService Implements IService Namespace : UBP Scripts UBPServices Scenes Assembly : .dll Syntax public class SceneService : ConfiguredService<SceneServiceConfig>, IService Properties ServiceConfig Declaration public override SceneServiceConfig ServiceConfig { get; } Property Value Type Description SceneServiceConfig Overrides ConfiguredService<SceneServiceConfig>.ServiceConfig Methods GetActiveScene() Returns the currently active scene. Declaration public Scene GetActiveScene() Returns Type Description Scene GetLoadedScenes() Returns the list of currently tracked loaded scenes. Declaration public List<Scene> GetLoadedScenes() Returns Type Description System.Collections.Generic.List<T> Scene GetScene(int) Gets a scene by its build index. Declaration public Scene GetScene(int sceneIndex) Parameters Type Name Description int sceneIndex Returns Type Description Scene GetScene(string) Gets a scene by name. Declaration public Scene GetScene(string sceneName) Parameters Type Name Description string sceneName Returns Type Description Scene InitializeAsync() Initializes the SceneService and resets the loaded scene list. Declaration public override Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task Overrides ConfiguredService<SceneServiceConfig>.InitializeAsync() LoadScene(int, LoadSceneMode) Synchronously loads a scene by build index. Declaration public void LoadScene(int sceneIndex, LoadSceneMode mode = LoadSceneMode.Single) Parameters Type Name Description int sceneIndex LoadSceneMode mode LoadScene(string, LoadSceneMode) Synchronously loads a scene by name. Declaration public void LoadScene(string sceneName, LoadSceneMode mode = LoadSceneMode.Single) Parameters Type Name Description string sceneName LoadSceneMode mode LoadSceneAsync(int, Action<float>, Action, bool, LoadSceneMode) Loads a scene asynchronously by index with optional callbacks. Declaration public Task LoadSceneAsync(int sceneIndex, Action<float> progressCallback, Action completionCallback, bool allowSceneActivation = true, LoadSceneMode mode = LoadSceneMode.Single) Parameters Type Name Description int sceneIndex System.Action<T> float progressCallback System.Action completionCallback bool allowSceneActivation LoadSceneMode mode Returns Type Description System.Threading.Tasks.Task LoadSceneAsync(int, LoadSceneMode) Asynchronously loads a scene by build index. Declaration public Task LoadSceneAsync(int sceneIndex, LoadSceneMode mode = LoadSceneMode.Single) Parameters Type Name Description int sceneIndex LoadSceneMode mode Returns Type Description System.Threading.Tasks.Task LoadSceneAsync(string, Action<float>, Action, bool, LoadSceneMode) Loads a scene asynchronously with optional progress and completion callbacks. Declaration public Task LoadSceneAsync(string sceneName, Action<float> progressCallback, Action completionCallback, bool allowSceneActivation = true, LoadSceneMode mode = LoadSceneMode.Single) Parameters Type Name Description string sceneName System.Action<T> float progressCallback System.Action completionCallback bool allowSceneActivation LoadSceneMode mode Returns Type Description System.Threading.Tasks.Task LoadSceneAsync(string, LoadSceneMode) Asynchronously loads a scene by name. Declaration public Task LoadSceneAsync(string sceneName, LoadSceneMode mode = LoadSceneMode.Single) Parameters Type Name Description string sceneName LoadSceneMode mode Returns Type Description System.Threading.Tasks.Task SetActiveScene(Scene) Sets a scene as the active scene. Declaration public void SetActiveScene(Scene scene) Parameters Type Name Description Scene scene UnloadScene(int) Unloads a scene by build index. Declaration public void UnloadScene(int sceneIndex) Parameters Type Name Description int sceneIndex UnloadScene(string) Unloads a scene by name. Declaration public void UnloadScene(string sceneName) Parameters Type Name Description string sceneName UnloadSceneAsync(int) Asynchronously unloads a scene by build index. Declaration public Task UnloadSceneAsync(int sceneIndex) Parameters Type Name Description int sceneIndex Returns Type Description System.Threading.Tasks.Task UnloadSceneAsync(string) Asynchronously unloads a scene by name. Declaration public Task UnloadSceneAsync(string sceneName) Parameters Type Name Description string sceneName Returns Type Description System.Threading.Tasks.Task UnloadSceneAsync(string, Action) Unloads a scene asynchronously with an optional completion callback. Declaration public Task UnloadSceneAsync(string sceneName, Action completionCallback) Parameters Type Name Description string sceneName System.Action completionCallback Returns Type Description System.Threading.Tasks.Task Implements IService"
  },
  "api/UBP.Scripts.UBPServices.Scenes.SceneServiceConfig.html": {
    "href": "api/UBP.Scripts.UBPServices.Scenes.SceneServiceConfig.html",
    "title": "Class SceneServiceConfig | Ultimate Base Project",
    "keywords": "Class SceneServiceConfig Inheritance object Object ScriptableObject SceneServiceConfig Namespace : UBP Scripts UBPServices Scenes Assembly : .dll Syntax [CreateAssetMenu(fileName = \"SceneServiceConfig\", menuName = \"Configs/Services/SceneServiceConfig\")] public class SceneServiceConfig : ScriptableObject Properties GameIntroScene The scene to be loaded automatically after ConfigStorage and Services are initialized. This is typically the first real scene the user sees. Declaration public SceneAsset GameIntroScene { get; } Property Value Type Description SceneAsset"
  },
  "api/UBP.Scripts.UBPServices.Services.html": {
    "href": "api/UBP.Scripts.UBPServices.Services.html",
    "title": "Class Services | Ultimate Base Project",
    "keywords": "Class Services Global manager for all registered services implementing IService. Handles service discovery, initialization, and access. Inheritance object Services Namespace : UBP Scripts UBPServices Assembly : .dll Syntax public class Services Methods CreateAsync() Initializes the Services system and all auto-discovered IService implementations. Declaration public static Task CreateAsync() Returns Type Description System.Threading.Tasks.Task GetServiceConfigPath(Type) Gets the expected config path for a given service type. Declaration public static string GetServiceConfigPath(Type serviceType) Parameters Type Name Description System.Type serviceType Returns Type Description string GetServiceConfigPath<T>() Gets the expected config path for a given service type. Declaration public static string GetServiceConfigPath<T>() where T : IService Returns Type Description string Type Parameters Name Description T Get<T>() Retrieves a registered service of type T. Declaration public static T Get<T>() where T : IService Returns Type Description T The service instance if found; otherwise, null. Type Parameters Name Description T The service type."
  },
  "api/UBP.Scripts.UBPServices.UI.Handlers.html": {
    "href": "api/UBP.Scripts.UBPServices.UI.Handlers.html",
    "title": "Namespace UBP.Scripts.UBPServices.UI.Handlers | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.UI.Handlers Classes UIDragHandler Enables dragging of a UI panel via a drag handle (such as a header bar). Keeps the panel within its local RectTransform hierarchy. UIResizeHandler Allows a UI panel to be resized via dragging, with minimum size constraints. Intended for use on a UI element with a draggable resize handle (like a corner)."
  },
  "api/UBP.Scripts.UBPServices.UI.Handlers.UIDragHandler.html": {
    "href": "api/UBP.Scripts.UBPServices.UI.Handlers.UIDragHandler.html",
    "title": "Class UIDragHandler | Ultimate Base Project",
    "keywords": "Class UIDragHandler Enables dragging of a UI panel via a drag handle (such as a header bar). Keeps the panel within its local RectTransform hierarchy. Inheritance object Object Component Behaviour MonoBehaviour UIDragHandler Namespace : UBP Scripts UBPServices UBP.Scripts.UBPServices.UI Handlers Assembly : .dll Syntax [RequireComponent(typeof(RectTransform))] public class UIDragHandler : MonoBehaviour Methods OnBeginDrag(PointerEventData) Called when the drag starts. Captures the offset between the cursor and the panel position. Declaration public void OnBeginDrag(PointerEventData eventData) Parameters Type Name Description UnityEngine.EventSystems.PointerEventData eventData OnDrag(PointerEventData) Called while dragging. Updates the panel's position based on the mouse location and initial offset. Declaration public void OnDrag(PointerEventData eventData) Parameters Type Name Description UnityEngine.EventSystems.PointerEventData eventData"
  },
  "api/UBP.Scripts.UBPServices.UI.Handlers.UIResizeHandler.html": {
    "href": "api/UBP.Scripts.UBPServices.UI.Handlers.UIResizeHandler.html",
    "title": "Class UIResizeHandler | Ultimate Base Project",
    "keywords": "Class UIResizeHandler Allows a UI panel to be resized via dragging, with minimum size constraints. Intended for use on a UI element with a draggable resize handle (like a corner). Inheritance object Object Component Behaviour MonoBehaviour UIResizeHandler Namespace : UBP Scripts UBPServices UBP.Scripts.UBPServices.UI Handlers Assembly : .dll Syntax public class UIResizeHandler : MonoBehaviour Methods OnDrag(PointerEventData) Called while the pointer is dragging. Calculates mouse delta and resizes the target panel accordingly. Declaration public void OnDrag(PointerEventData eventData) Parameters Type Name Description UnityEngine.EventSystems.PointerEventData eventData OnPointerDown(PointerEventData) Called when the resize handle is pressed. Caches the current mouse position and canvas reference. Declaration public void OnPointerDown(PointerEventData eventData) Parameters Type Name Description UnityEngine.EventSystems.PointerEventData eventData"
  },
  "api/UBP.Scripts.UBPServices.Updaters.html": {
    "href": "api/UBP.Scripts.UBPServices.Updaters.html",
    "title": "Namespace UBP.Scripts.UBPServices.Updaters | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Updaters Classes Updater Central update dispatcher used by the UpdaterService . Allows non-MonoBehaviour objects to hook into Unity's Update, FixedUpdate, and LateUpdate cycles. UpdaterService A service that manages custom update loops for non-MonoBehaviour objects. It provides registration and unregistration for objects requiring Update, FixedUpdate, or LateUpdate via the internal Updater component. Interfaces IFixedUpdatable Interface for objects that want to receive custom FixedUpdate() callbacks from the Updater during the physics step. ILateUpdatable Interface for objects that want to receive custom LateUpdate() callbacks from the Updater at the end of each frame. IUpdatable Interface for objects that want to receive custom Update() callbacks from the Updater each frame."
  },
  "api/UBP.Scripts.UBPServices.Updaters.IFixedUpdatable.html": {
    "href": "api/UBP.Scripts.UBPServices.Updaters.IFixedUpdatable.html",
    "title": "Interface IFixedUpdatable | Ultimate Base Project",
    "keywords": "Interface IFixedUpdatable Interface for objects that want to receive custom FixedUpdate() callbacks from the Updater during the physics step. Namespace : UBP Scripts UBPServices Updaters Assembly : .dll Syntax public interface IFixedUpdatable Methods FixedUpdate() Called at a fixed timestep by the Updater if registered. Use for physics or time-sensitive calculations. Declaration void FixedUpdate()"
  },
  "api/UBP.Scripts.UBPServices.Updaters.ILateUpdatable.html": {
    "href": "api/UBP.Scripts.UBPServices.Updaters.ILateUpdatable.html",
    "title": "Interface ILateUpdatable | Ultimate Base Project",
    "keywords": "Interface ILateUpdatable Interface for objects that want to receive custom LateUpdate() callbacks from the Updater at the end of each frame. Namespace : UBP Scripts UBPServices Updaters Assembly : .dll Syntax public interface ILateUpdatable Methods LateUpdate() Called at the end of the frame by the Updater if registered. Use for operations that must occur after all Update calls. Declaration void LateUpdate()"
  },
  "api/UBP.Scripts.UBPServices.Updaters.IUpdatable.html": {
    "href": "api/UBP.Scripts.UBPServices.Updaters.IUpdatable.html",
    "title": "Interface IUpdatable | Ultimate Base Project",
    "keywords": "Interface IUpdatable Interface for objects that want to receive custom Update() callbacks from the Updater each frame. Namespace : UBP Scripts UBPServices Updaters Assembly : .dll Syntax public interface IUpdatable Methods Update() Declaration void Update()"
  },
  "api/UBP.Scripts.UBPServices.Updaters.Updater.html": {
    "href": "api/UBP.Scripts.UBPServices.Updaters.Updater.html",
    "title": "Class Updater | Ultimate Base Project",
    "keywords": "Class Updater Central update dispatcher used by the UpdaterService . Allows non-MonoBehaviour objects to hook into Unity's Update, FixedUpdate, and LateUpdate cycles. Inheritance object Object Component Behaviour MonoBehaviour Updater Namespace : UBP Scripts UBPServices Updaters Assembly : .dll Syntax public class Updater : MonoBehaviour Methods Register(object) Registers an object to receive update calls. The object may implement one or more of IUpdatable , IFixedUpdatable , or ILateUpdatable . Declaration public void Register(object updateRequester) Parameters Type Name Description object updateRequester The object to register. Unregister(object) Unregisters an object from receiving update calls. Declaration public void Unregister(object updateRequester) Parameters Type Name Description object updateRequester The object to unregister."
  },
  "api/UBP.Scripts.UBPServices.Updaters.UpdaterService.html": {
    "href": "api/UBP.Scripts.UBPServices.Updaters.UpdaterService.html",
    "title": "Class UpdaterService | Ultimate Base Project",
    "keywords": "Class UpdaterService A service that manages custom update loops for non-MonoBehaviour objects. It provides registration and unregistration for objects requiring Update, FixedUpdate, or LateUpdate via the internal Updater component. Inheritance object UpdaterService Implements IService Namespace : UBP Scripts UBPServices Updaters Assembly : .dll Syntax public class UpdaterService : IService Methods InitializeAsync() Initializes the service by creating a persistent Updater GameObject in the scene. Declaration public Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task Register(object) Registers an object that needs to receive update callbacks from the Updater. The object must implement one or more of IUpdatable, IFixedUpdatable, or ILateUpdatable. Declaration public void Register(object updateRequester) Parameters Type Name Description object updateRequester The object to register for updates. Unregister(object) Unregisters an object from the update loop. Declaration public void Unregister(object updateRequester) Parameters Type Name Description object updateRequester The object to remove from update callbacks. Implements IService"
  },
  "index.html": {
    "href": "index.html",
    "title": "Ultimate Base Project (UBP) | Ultimate Base Project",
    "keywords": "Ultimate Base Project (UBP) Welcome to the Ultimate Base Project documentation. UBP is a modular Unity foundation with prebuilt service systems, configuration handling, and editor tooling to kickstart your project development. 🚀 Use this guide to understand, install, and extend UBP with confidence."
  },
  "manual/create-service.html": {
    "href": "manual/create-service.html",
    "title": "🛠 How to Create a Service in UBP | Ultimate Base Project",
    "keywords": "🛠 How to Create a Service in UBP This guide explains how to create your own UBP service, either: Without configuration — simplest path With configuration — editable via UBP Settings Window ⚠️ Important: All services are automatically discovered and registered when the game starts. 1️⃣ Create a Basic (Configless) Service If your service doesn’t need any editable settings: using System.Threading.Tasks; public class SampleService : IService { public SampleService() { } // Parameterless constructor required public Task InitializeAsync() { // Initialization logic here return Task.CompletedTask; } } ✅ That’s it — the framework will automatically create, register and inject dependencies for this service. 2️⃣ Create a Configured Service (with UBP Settings support) If you want your service to have editable settings in the UBP Settings Window : Step 2.1 — Create the config ScriptableObject using UnityEngine; [CreateAssetMenu(fileName = nameof(SampleServiceConfig), menuName = \"Configs/Services/\" + nameof(SampleServiceConfig))] public class SampleServiceConfig : ScriptableObject { [field: SerializeField] public string ExampleSetting { get; private set; } = \"Default value\"; } This asset will hold all editable settings for your service. Step 2.2 — Create the service class using System.Threading.Tasks; public class SampleService : ConfiguredService<SampleServiceConfig> { public SampleService() { } // Parameterless constructor required // Returns the active config instance for this service public override SampleServiceConfig ServiceConfig => ConfigStorage.GetConfig<SampleServiceConfig>(); public override Task InitializeAsync() { // Use ServiceConfig.ExampleSetting here return Task.CompletedTask; } } Inheriting from ConfiguredService<TConfig> requires from you to implement ServiceConfig property, which returns the active configuration instance for this service. 🏆 Best Practices InitializeAsync() is called after creation — do all setup work here Do not put heavy logic in the constructor"
  },
  "manual/getting-started.html": {
    "href": "manual/getting-started.html",
    "title": "Getting Started | Ultimate Base Project",
    "keywords": "Getting Started ✅ Requirements - Unity 2021.3 or newer 🚀 Quick Start 1. Import the Asset Import Ultimate Base Project (UBP) from the Package Manager into your Unity project. 2. Create the \"Entry\" Scene Create a new empty scene and name it: Entry This scene will act as the bootstrapper — it's where all UBP services and configurations are initialized before your actual game begins. 3. Add the Entry Scene to Build Settings Go to File > Build Settings Click \"Add Open Scenes\" to include the currently opened Entry scene or drag it into the list Make sure it’s the first scene in the list (index 0 ) 4. Open the UBP Settings Window Navigate to: Window > YGames > Ultimate Base Project This opens the centralized UBP configuration window. 5. Set Your Game's Intro Scene In the UBP Settings window, select the Scene Service tab Set the GameIntroScene field to the first real gameplay scene (e.g. MainMenu , Gameplay , etc.) UBP will automatically load this scene after initializing all services 6. Start Using UBP Services Once the Entry scene initializes UBP, you can immediately call all services from anywhere in your code: Services.Get<AudioService>().Play(\"ButtonClick\"); Services.Get<SaveService>().Save(\"playerData\", playerData); Services.Get<ScenesService>().LoadScene(\"GameScene\"); You’re now ready to build your game on top of a solid, service-driven foundation. You can also define and register your own services easily. See Create Service for more info."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Introduction | Ultimate Base Project",
    "keywords": "Introduction UBP is built around a modular service system . Every major system (Audio, Save, Scenes, etc.) is managed as a service and accessible from anywhere in the project. Whether you’re a solo developer or part of a larger team, UBP provides a production-ready environment designed to save you countless hours on setup, architecture decisions, and backend implementation. Instead of reinventing the wheel every project, just import UBP and start creating . ⚡ Instant Productivity With UBP, you don’t need to worry about setting up your game's core systems. Everything is ready from the start: 🎮 Need to play a sound? Just call PlaySFX() 💾 Want to save the game? Use SaveGame() and you're done 🧠 Need data persistence, management, or loading? It's all built-in and extensible 🐞 Need in-game debugging? Open the Debug Console and run your commands or check logs 🔁 Want to load another scene? Just call LoadScene() And much more! This project is structured to feel like a natural extension of Unity — intuitive, familiar, but vastly more powerful. 🧩 Extensible, Not Restrictive Every part of UBP is designed to be extended . You can build your own systems on top of existing services or inject custom implementations. 💰 Why Should I Buy Ultimate Base Project? The Ultimate Base Project (UBP) is designed to let you start building your game immediately without spending days or weeks reinventing backend systems It ships with a ready-to-use service architecture, so you can call essential features from anywhere in your codebase without worrying about boilerplate setup Key advantages: 🚀 Instant Productivity – Includes core systems like Audio, Saves, Scene Management, Debug Console, and more, ready to go out of the box. 🧩 Modular & Scalable – Add, remove, or replace services without touching the rest of your codebase. 🧠 Clean Architecture – Encourages a decoupled, testable, and maintainable code structure. 🔄 Cross-Scene Persistence – Services remain alive across scene changes with no extra setup. 🛠 Developer Quality of Life – Debug Console, Scene Service, and other utilities make testing and iteration painless. 🎮 Focus on your game, not backend setup - Import UBP and start building your game immediately. Perfect for: Solo devs who want to skip the boring boilerplate and get straight to gameplay. Teams that need a unified, scalable base for multiple projects. Game jams where speed and stability are critical. Next Steps Start by checking out the Getting Started guide to see how everything connects."
  },
  "manual/services/application-events.html": {
    "href": "manual/services/application-events.html",
    "title": "📦 Application Events Service | Ultimate Base Project",
    "keywords": "📦 Application Events Service The Application Events Service provides a centralized, non-MonoBehaviour way to react to Unity’s core lifecycle events — such as pause , focus , quit , and destroy — from any part of your codebase. This is particularly useful when you want backend systems (services, managers, etc.) to respond to application-level events without needing a MonoBehaviour . ✅ Features Listens to OnApplicationPause , OnApplicationFocus , OnApplicationQuit , and OnDestroy Works seamlessly across all scenes 🧪 Example Usage public class SampleClass { public SampleClass() { var appEvents = Services.Get<ApplicationEventsService>(); appEvents.OnApplicationPause += paused => Debug.Log($\"Paused: {paused}\"); appEvents.OnApplicationFocus += focused => Debug.Log($\"Focused: {focused}\"); appEvents.OnApplicationQuit += () => Debug.Log(\"Application is quitting\"); appEvents.OnApplicationDestroy += () => Debug.Log(\"App destroy lifecycle event\"); } } 🔄 Event Reference Event Description OnApplicationPause Invoked when the application is paused or resumed. OnApplicationFocus Invoked when the application gains or loses focus. OnApplicationQuit Invoked right before the application quits. OnApplicationDestroy Invoked when the dispatcher GameObject is destroyed. 🏆 Best Practices Use this service when you want to react to app-level events from systems that don't derive from MonoBehaviour . In case when you want to handle these events from single and centralized place."
  },
  "manual/services/audio.html": {
    "href": "manual/services/audio.html",
    "title": "🔊 Audio Service | Ultimate Base Project",
    "keywords": "🔊 Audio Service The Audio Service provides a centralized system for playing sound effects (SFX) and music across your game. It supports volume control through Unity’s built-in AudioMixer , and handles audio source reuse to avoid unnecessary allocations and runtime overhead. ✅ Features Plays 2D/3D sound effects Plays Music and SFX with volume and pitch control Pooled AudioSources for optimized performance Volume control for SFX and Music via AudioMixerGroup Works seamlessly across all scenes 🧪 Example Usage Play a Sound Effect (SFX) Services.Get<AudioService>().PlaySFX(sfxClip, transform.position); Play Music With custom volume, pitch, and loop settings: Services.Get<AudioService>().PlayMusic(musicClip, volume: 0.5f, pitch: 1f, loop: true); Set SFX and Music Volume Services.Get<AudioService>().SetSFXVolume(0.7f); Services.Get<AudioService>().SetMusicVolume(0.3f); ⚙️ Configuration Audio Service Config available in UBP Settings Window : Window > YGames > Ultimate Base Project > Audio Service Field Description AudioSourcesPoolSize Number of AudioSources pre-created at startup. MusicAudioMixerGroup Mixer group used for music playback. SFXAudioMixerGroup Mixer group used for SFX playback. Make sure your Audio Mixer has exposed volume parameters named \"Volume\" to allow runtime volume adjustments."
  },
  "manual/services/debug-console.html": {
    "href": "manual/services/debug-console.html",
    "title": "🐞 Debug Service | Ultimate Base Project",
    "keywords": "🐞 Debug Service The Debug Service provides powerful runtime debugging tools. It captures logs, manages an in-game console, and supports registration of custom console commands. ✅ Features Captures Unity log messages Stores logs in a bounded queue Displays logs in a persistent in-game console UI Registers and executes custom console commands Toggleable with a keybind (e.g. ~ ) Only active in development builds and editor ( Debug.isDebugBuild ) The command system automatically checks the number and type of arguments You can define any number of parameters using different types ( int , bool , float , etc.) Resizable and draggable UI window ⚙️ Configuration Debug Service Config available in UBP Settings Window : Window > YGames > Ultimate Base Project > Debug Service Field Description MaxLogMessagesCapacity Max number of logs to store in memory ConsoleCanvasPrefab Prefab shown when toggling console OpenConsoleKey KeyCode to toggle the console LogMessageColor Log message color WarningMessageColor Warning message color ErrorMessageColor Error message color 🛠️ How To Create Custom Console Command 1. Create a New Command Class Create a new class that inherits from ConsoleCommand and implement the Execute and Undo methods. using System; using UnityEngine; using UBP.Scripts.UBPServices.Debugs.ConsoleCommands; public class PrintNameCommand : ConsoleCommand { public PrintNameCommand(Type[] requiredArguments) : base(requiredArguments) {} public override void Execute(object[] arguments) { var name = arguments[0] as string; Debug.Log($\"Hello, {name}!\"); } public override void Undo() { } } The constructor defines what argument types are required. The Name is automatically taken from the class name ( PrintNameCommand ). The Execute method receives user input as object[] . 2. Register the Command in Code Register your command so the console can recognize it: Services.Get<DebugService>().RegisterCommand(new PrintNameCommand(new[] { typeof(string) })); Place this call during initialization (e.g. in a MonoBehaviour's Start() or during Debug Service initialization phase). 3. Execute the Command from the Console UI Enter Play Mode and open the debug console (default: ~ key). Type your command using the expected arguments: PrintNameCommand John Press Enter to execute. You should see this in the Unity Console: Hello, John! 🏆 Best Practices Enabling cheat/debug tools Quickly simulating gameplay events - Testing systems without building UI"
  },
  "manual/services/factory.html": {
    "href": "manual/services/factory.html",
    "title": "🏭 Factory Service | Ultimate Base Project",
    "keywords": "🏭 Factory Service The FactoryService is responsible for applying dependency injection or post-construction logic to objects using dynamically discovered IPostProcessor implementations. This allows you to extend behavior without hardcoding dependencies, making your architecture clean and decoupled. ✅ Features Scans all assemblies for classes that implement IPostProcessor Instantiates and stores all valid processors at runtime Allows you to call InjectDependency(object) on any object to trigger all processors 🧪 Example Usage Inject dependencies or trigger setup logic on an object: Services.Get<FactoryService>().InjectDependency(myObject); This will run all registered processors on myObject . 🛠️ How To Create Custom Post Processor The FactoryService applies logic to objects using a system of pluggable PostProcessors . These are ideal for injecting dependencies, handling interfaces, registering objects to other services, or setting up runtime logic. 1. Create a Class that Implements IPostProcessor Your custom processor must implement the Process(object target) method. Example: using UBP.Scripts.UBPServices.Factory.PostProcessors; public class SamplePostProcessor : IPostProcessor { public void Process(object target) { if (target is SampleClass sampleObject) { //Do something with sampleObject } } } 3. Injecting Dependencies into Your Objects To run injection process on the object call: Services.Get<FactoryService>().InjectDependency(myObject); This will run your Process() logic along with all other registered processors. 🏆 Best Practices Decouple your architecture by implementing more interfaces"
  },
  "manual/services/index.html": {
    "href": "manual/services/index.html",
    "title": "Services | Ultimate Base Project",
    "keywords": "Services UBP Services provide a modular, scalable way to add functionality to your Unity projects. Each service is designed to handle a specific system or feature—such as saving data, managing update loops, or handling scene transitions—allowing you to keep your code clean and maintainable. All available services: SaveService Handles saving and loading game data safely and asynchronously with backup support. UpdaterService Provides custom update loops for non-MonoBehaviour objects, supporting Update, FixedUpdate, and LateUpdate callbacks. SceneService Manages scene loading and unloading, including async operations and scene lifecycle events. AudioService Manages all audio playback and settings across the project. ApplicationEventsService Provides centralized event hooks for Unity application lifecycle events like focus changes, pauses, and application exit. DebugService An in-game console for viewing logs and executing commands at runtime. FactoryService Responsible for applying dependency injection or post-construction logic."
  },
  "manual/services/saves.html": {
    "href": "manual/services/saves.html",
    "title": "💾 Save Service | Ultimate Base Project",
    "keywords": "💾 Save Service The SaveService provides persistent data storage for your game, handling serialization, backup recovery, and both async and sync file operations. This ensures safe and robust save/load functionality with minimal setup and full extensibility. ✅ Features Serializes and saves any object to disk (sync or async) Creates backups and handles recovery if the main save is corrupted Supports plug-and-play serializers (e.g., JSON, Binary) Automatically stores files under a configurable root folder 🧪 Example Usage Save an object: Services.Get<SaveService>().Save(\"playerData\", playerData); Load it back: var data = Services.Get<SaveService>().Load<PlayerData>(\"playerData\"); Or use async: await Services.Get<SaveService>().SaveAsync(\"playerData\", playerData); var data = await Services.Get<SaveService>().LoadAsync<PlayerData>(\"playerData\"); ⚙️ Configuration Save Service Config available in UBP Settings Window : Window > YGames > Ultimate Base Project > Save Service Field Description SavesRootFolder Root folder of all game saves Open Saves Folder Opens the root saves folder 🔄 Save File Serializer The SaveService uses a SaveSerializer to convert objects into a string format. By default, it uses: JSONSaveSerializer This serializer wraps Unity’s built-in JsonUtility for fast and simple JSON serialization. You can implement your own by inheriting SaveSerializer and overriding: string Serialize<T>(T data) T Deserialize<T>(string data) Then assign your serializer during SaveService initialization: public class SaveService : ConfiguredService<SaveServiceConfig>{ public override Task InitializeAsync() { _saveSerializer = new CustomSaveSerializer(); return Task.CompletedTask; } } 🏆 Best Practices Plug in custom serializers (JSON, binary, encrypted) Use async save/load for runtime stability"
  },
  "manual/services/scenes.html": {
    "href": "manual/services/scenes.html",
    "title": "🎭 Scenes Service | Ultimate Base Project",
    "keywords": "🎭 Scenes Service The Scenes Service is responsible for managing scene loading, unloading, and transitions in a structured and extensible way. It centralizes scene management, allowing for asynchronous loading, additive scenes, and event-driven scene lifecycle handling. ✅ Features Async/sync scene loading with callbacks Additive scene loading for multi-scene workflows Events for scene load/unload lifecycle A clean API for developers to load/unload scenes without directly interacting with UnityEngine.SceneManagement 🧪 Example Usage Load a Scene: Services.Get<ScenesService>().LoadScene(\"GameScene\"); Load a Scene Async: Services.Get<SceneService>().LoadSceneAsync(\"GameScene\", progressCallback, completionCallback, allowSceneActivation: true, LoadSceneMode.Additive); Unload a Scene Async: await Services.Get<ScenesService>().UnloadSceneAsync(\"GameScene\"); ⚙️ Configuration Scene Service Config available in UBP Settings Window : Window > YGames > Ultimate Base Project > Scene Service Field Description GameIntroScene The scene which UBP loads after EntryScene once all Services and Configs are loaded and initialized"
  },
  "manual/services/updater.html": {
    "href": "manual/services/updater.html",
    "title": "⏱ Updater Service | Ultimate Base Project",
    "keywords": "⏱ Updater Service The UpdaterService allows plain C# objects to hook into Unity’s Update , FixedUpdate , and LateUpdate loops without inheriting from MonoBehaviour . It manages object registration and ensures update callbacks are delivered efficiently through an internal Updater component. ✅ Features Allows you register/unregister objects for: Update() (per frame) FixedUpdate() (fixed timestep, physics-safe) LateUpdate() (end-of-frame logic) Safely handles null objects and delayed registration/unregistration Works seamlessly across all scenes 🧪 Example Usage Register an object that implements update interfaces: public class PlayerController : IUpdatable, IFixedUpdatable { public void Update() { // Frame-based logic } public void FixedUpdate() { // Physics-based logic } } Register this way: Services.Get<UpdaterService>().Register(playerController); Or through the FactoryService : Services.Get<FactoryService>().InjectDependency(playerController);"
  },
  "manual/ubp-settings-window.html": {
    "href": "manual/ubp-settings-window.html",
    "title": "⚙️ UBP Settings Window | Ultimate Base Project",
    "keywords": "⚙️ UBP Settings Window The UBP Settings Window is the central place to setup all configured services in your project. ✅ Features Lists every configured service automatically Displays all their serialized fields from the associated ScriptableObject config - Saves changes to the linked config asset 🔍 How to Access Navigate to: Window > YGames > Ultimate Base Project"
  }
}