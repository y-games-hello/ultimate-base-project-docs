{
  "api/UBP.Scripts.ApplicationEntry.html": {
    "href": "api/UBP.Scripts.ApplicationEntry.html",
    "title": "Class ApplicationEntry | Ultimate Base Project",
    "keywords": "Class ApplicationEntry The application's startup entry point, invoked automatically when the game is launched. Responsible for initializing configuration and service layers, then loading the game intro scene. Inheritance object ApplicationEntry Namespace : UBP Scripts Assembly : .dll Syntax public class ApplicationEntry"
  },
  "api/UBP.Scripts.Data.AssetLoader.html": {
    "href": "api/UBP.Scripts.Data.AssetLoader.html",
    "title": "Class AssetLoader | Ultimate Base Project",
    "keywords": "Class AssetLoader Centralized utility class for loading assets using Unity's Resources or Addressables APIs. Provides async and sync loading methods for assets and scenes. Inheritance object AssetLoader Namespace : UBP Scripts Data Assembly : .dll Syntax public static class AssetLoader Methods | Improve this Doc View Source LoadResourcesAssetAsync<T>(string) Asynchronously loads an asset from the Resources folder. Declaration public static Task<T> LoadResourcesAssetAsync<T>(string assetPath) where T : Object Parameters Type Name Description string assetPath Returns Type Description System.Threading.Tasks.Task<TResult> Type Parameters Name Description T | Improve this Doc View Source LoadResourcesAsset<T>(string) Asynchronously loads an asset from the Resources folder. Declaration public static T LoadResourcesAsset<T>(string assetPath) where T : Object Parameters Type Name Description string assetPath Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source LoadResourcesAssets<T>(string) Synchronously loads all assets of type T from the specified folder in Resources. Declaration public static IList<T> LoadResourcesAssets<T>(string rootFolderPath) where T : Object Parameters Type Name Description string rootFolderPath Returns Type Description System.Collections.Generic.IList<T> Type Parameters Name Description T"
  },
  "api/UBP.Scripts.Data.Configs.DataConfig.html": {
    "href": "api/UBP.Scripts.Data.Configs.DataConfig.html",
    "title": "Class DataConfig | Ultimate Base Project",
    "keywords": "Class DataConfig Inheritance object Object ScriptableObject DataConfig Namespace : UBP Scripts Data Configs Assembly : .dll Syntax [CreateAssetMenu(fileName = \"DataConfig\", menuName = \"Configs/DataConfig\")] public class DataConfig : ScriptableObject Properties | Improve this Doc View Source ConfigsPath Declaration public string ConfigsPath { get; } Property Value Type Description string"
  },
  "api/UBP.Scripts.Data.Configs.GeneralConfig.html": {
    "href": "api/UBP.Scripts.Data.Configs.GeneralConfig.html",
    "title": "Class GeneralConfig | Ultimate Base Project",
    "keywords": "Class GeneralConfig Inheritance object Object ScriptableObject GeneralConfig Namespace : UBP Scripts Data Configs Assembly : .dll Syntax [CreateAssetMenu(fileName = \"GeneralConfig\", menuName = \"Configs/GeneralConfig\")] public class GeneralConfig : ScriptableObject"
  },
  "api/UBP.Scripts.Data.Configs.html": {
    "href": "api/UBP.Scripts.Data.Configs.html",
    "title": "Namespace UBP.Scripts.Data.Configs | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.Data.Configs Classes DataConfig GeneralConfig"
  },
  "api/UBP.Scripts.Data.ConfigStorage.html": {
    "href": "api/UBP.Scripts.Data.ConfigStorage.html",
    "title": "Class ConfigStorage | Ultimate Base Project",
    "keywords": "Class ConfigStorage Singleton-based storage for all project configuration assets loaded at runtime. Automatically loads configs via the selected IConfigLoader implementation. Inheritance object ConfigStorage Namespace : UBP Scripts Data Assembly : .dll Syntax public class ConfigStorage Methods | Improve this Doc View Source CreateAsync() Declaration public static Task CreateAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source GetConfig<T>() Returns the first config of type T if available. Declaration public static T GetConfig<T>() where T : ScriptableObject Returns Type Description T The config instance, or null if not found. Type Parameters Name Description T The type of the config to retrieve. | Improve this Doc View Source GetConfigs<T>() Returns all configs of type T found in the cache. Declaration public static List<T> GetConfigs<T>() where T : ScriptableObject Returns Type Description System.Collections.Generic.List<T> A list of matching config instances. Type Parameters Name Description T The type of the configs to retrieve."
  },
  "api/UBP.Scripts.Data.html": {
    "href": "api/UBP.Scripts.Data.html",
    "title": "Namespace UBP.Scripts.Data | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.Data Classes AssetLoader Centralized utility class for loading assets using Unity's Resources or Addressables APIs. Provides async and sync loading methods for assets and scenes. ConfigStorage Singleton-based storage for all project configuration assets loaded at runtime. Automatically loads configs via the selected IConfigLoader implementation. ResourcesConfigLoader Loads configuration assets (e.g. ScriptableObjects) from the Unity Resources folder at runtime. Implements IConfigLoader for use in the UBP configuration system. Interfaces IConfigLoader Defines an interface for asynchronously loading configuration assets such as ScriptableObject s. This abstraction allows support for different loading backends (e.g. Resources, Addressables, Web)."
  },
  "api/UBP.Scripts.Data.IConfigLoader.html": {
    "href": "api/UBP.Scripts.Data.IConfigLoader.html",
    "title": "Interface IConfigLoader | Ultimate Base Project",
    "keywords": "Interface IConfigLoader Defines an interface for asynchronously loading configuration assets such as ScriptableObject s. This abstraction allows support for different loading backends (e.g. Resources, Addressables, Web). Namespace : UBP Scripts Data Assembly : .dll Syntax public interface IConfigLoader Methods | Improve this Doc View Source InitializeAsync() Performs any asynchronous initialization needed by the loader. Declaration Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source LoadConfigsAsync() Loads and returns all configuration ScriptableObject s. Declaration Task<IList<ScriptableObject>> LoadConfigsAsync() Returns Type Description System.Threading.Tasks.Task<TResult> System.Collections.Generic.IList<T> ScriptableObject A list of configuration assets."
  },
  "api/UBP.Scripts.Data.ResourcesConfigLoader.html": {
    "href": "api/UBP.Scripts.Data.ResourcesConfigLoader.html",
    "title": "Class ResourcesConfigLoader | Ultimate Base Project",
    "keywords": "Class ResourcesConfigLoader Loads configuration assets (e.g. ScriptableObjects) from the Unity Resources folder at runtime. Implements IConfigLoader for use in the UBP configuration system. Inheritance object ResourcesConfigLoader Implements IConfigLoader Namespace : UBP Scripts Data Assembly : .dll Syntax public class ResourcesConfigLoader : IConfigLoader Constructors | Improve this Doc View Source ResourcesConfigLoader(string) Creates a new loader that will search for config assets under the specified Resources path. Declaration public ResourcesConfigLoader(string rootPath) Parameters Type Name Description string rootPath Relative path under Resources/ where configuration assets are stored. Methods | Improve this Doc View Source InitializeAsync() Performs any asynchronous initialization needed by the loader. Declaration public Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source LoadConfigsAsync() Loads all ScriptableObject configs found at the root path inside the Resources folder. Declaration public Task<IList<ScriptableObject>> LoadConfigsAsync() Returns Type Description System.Threading.Tasks.Task<TResult> System.Collections.Generic.IList<T> ScriptableObject A list of deserialized config objects. Implements IConfigLoader"
  },
  "api/UBP.Scripts.Editor.EditorApplicationEntry.html": {
    "href": "api/UBP.Scripts.Editor.EditorApplicationEntry.html",
    "title": "Class EditorApplicationEntry | Ultimate Base Project",
    "keywords": "Class EditorApplicationEntry Automatically sets the play mode start scene in the Unity Editor to the first scene listed in build settings. Ensures a consistent and controlled entry point for testing and development. Inheritance object EditorApplicationEntry Namespace : UBP Scripts Editor Assembly : .dll Syntax [InitializeOnLoad] public static class EditorApplicationEntry"
  },
  "api/UBP.Scripts.Editor.html": {
    "href": "api/UBP.Scripts.Editor.html",
    "title": "Namespace UBP.Scripts.Editor | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.Editor Classes EditorApplicationEntry Automatically sets the play mode start scene in the Unity Editor to the first scene listed in build settings. Ensures a consistent and controlled entry point for testing and development."
  },
  "api/UBP.Scripts.Extensions.BoundedQueue-1.html": {
    "href": "api/UBP.Scripts.Extensions.BoundedQueue-1.html",
    "title": "Class BoundedQueue<T> | Ultimate Base Project",
    "keywords": "Class BoundedQueue<T> A fixed-capacity queue that discards the oldest element when new items are added beyond the limit. Useful for logs, history buffers, and rolling data windows. Inheritance object BoundedQueue<T> Namespace : UBP Scripts Extensions Assembly : .dll Syntax public class BoundedQueue<T> Type Parameters Name Description T The type of elements stored in the queue. Constructors | Improve this Doc View Source BoundedQueue(int) Initializes a new instance of the BoundedQueue<T> class with a fixed capacity. Declaration public BoundedQueue(int capacity) Parameters Type Name Description int capacity The maximum number of items the queue can hold. Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description int Methods | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Enqueue(T) Declaration public void Enqueue(T item) Parameters Type Name Description T item | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the queue. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator<T> | Improve this Doc View Source ToArray() Declaration public T[] ToArray() Returns Type Description"
  },
  "api/UBP.Scripts.Extensions.html": {
    "href": "api/UBP.Scripts.Extensions.html",
    "title": "Namespace UBP.Scripts.Extensions | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.Extensions Classes BoundedQueue<T> A fixed-capacity queue that discards the oldest element when new items are added beyond the limit. Useful for logs, history buffers, and rolling data windows. TaskExtensions UIExtensions"
  },
  "api/UBP.Scripts.Extensions.TaskExtensions.html": {
    "href": "api/UBP.Scripts.Extensions.TaskExtensions.html",
    "title": "Class TaskExtensions | Ultimate Base Project",
    "keywords": "Class TaskExtensions Inheritance object TaskExtensions Namespace : UBP Scripts Extensions Assembly : .dll Syntax public static class TaskExtensions Methods | Improve this Doc View Source ToCoroutine(Task) Converts a System.Threading.Tasks.Task into a coroutine so it can be yielded inside Unity coroutines. Declaration public static IEnumerator ToCoroutine(this Task task) Parameters Type Name Description System.Threading.Tasks.Task task The task to convert. Returns Type Description System.Collections.IEnumerator An IEnumerator that yields until the task completes. | Improve this Doc View Source ToTask(AsyncOperation) Converts a Unity AsyncOperation into a System.Threading.Tasks.Task , enabling use with async/await. Declaration public static Task ToTask(this AsyncOperation operation) Parameters Type Name Description AsyncOperation operation The Unity async operation to wrap. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when the operation finishes. | Improve this Doc View Source ToTask(ResourceRequest) Converts a Unity ResourceRequest into a System.Threading.Tasks.Task , allowing use with async/await. Declaration public static Task ToTask(this ResourceRequest request) Parameters Type Name Description ResourceRequest request The ResourceRequest to wait for. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when the request finishes."
  },
  "api/UBP.Scripts.Extensions.UIExtensions.html": {
    "href": "api/UBP.Scripts.Extensions.UIExtensions.html",
    "title": "Class UIExtensions | Ultimate Base Project",
    "keywords": "Class UIExtensions Inheritance object UIExtensions Namespace : UBP Scripts Extensions Assembly : .dll Syntax public static class UIExtensions Methods | Improve this Doc View Source GetPositionInsideRectTransform(RectTransform, RectTransform) Declaration public static Vector2 GetPositionInsideRectTransform(this RectTransform target, RectTransform parentRectTransform) Parameters Type Name Description RectTransform target RectTransform parentRectTransform Returns Type Description Vector2"
  },
  "api/UBP.Scripts.html": {
    "href": "api/UBP.Scripts.html",
    "title": "Namespace UBP.Scripts | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts Classes ApplicationEntry The application's startup entry point, invoked automatically when the game is launched. Responsible for initializing configuration and service layers, then loading the game intro scene. UBPConstants"
  },
  "api/UBP.Scripts.UBPConstants.html": {
    "href": "api/UBP.Scripts.UBPConstants.html",
    "title": "Class UBPConstants | Ultimate Base Project",
    "keywords": "Class UBPConstants Inheritance object UBPConstants Namespace : UBP Scripts Assembly : .dll Syntax public static class UBPConstants Properties | Improve this Doc View Source ConfigsRoot Declaration public static string ConfigsRoot { get; } Property Value Type Description string | Improve this Doc View Source UBPPrefix Declaration public static string UBPPrefix { get; } Property Value Type Description string"
  },
  "api/UBP.Scripts.UBPServices.ApplicationEvents.ApplicationEventsDispatcher.html": {
    "href": "api/UBP.Scripts.UBPServices.ApplicationEvents.ApplicationEventsDispatcher.html",
    "title": "Class ApplicationEventsDispatcher | Ultimate Base Project",
    "keywords": "Class ApplicationEventsDispatcher A MonoBehaviour that listens for Unity application events (focus, pause, quit, destroy) and forwards them to the centralized ApplicationEventsService . This enables non-MonoBehaviour systems to respond to Unity lifecycle events. Inheritance object Object Component Behaviour MonoBehaviour ApplicationEventsDispatcher Namespace : UBP Scripts UBPServices ApplicationEvents Assembly : .dll Syntax public class ApplicationEventsDispatcher : MonoBehaviour"
  },
  "api/UBP.Scripts.UBPServices.ApplicationEvents.ApplicationEventsService.html": {
    "href": "api/UBP.Scripts.UBPServices.ApplicationEvents.ApplicationEventsService.html",
    "title": "Class ApplicationEventsService | Ultimate Base Project",
    "keywords": "Class ApplicationEventsService A centralized service that broadcasts application lifecycle events such as pause, focus, quit, and destroy. Allows non-MonoBehaviour systems to subscribe to Unity-level events. Inheritance object ApplicationEventsService Implements IService Namespace : UBP Scripts UBPServices ApplicationEvents Assembly : .dll Syntax public class ApplicationEventsService : IService Fields | Improve this Doc View Source OnApplicationDestroy Called when the application is destroyed. Declaration public Action OnApplicationDestroy Field Value Type Description System.Action | Improve this Doc View Source OnApplicationFocus Declaration public Action<bool> OnApplicationFocus Field Value Type Description System.Action<T> bool | Improve this Doc View Source OnApplicationPause Declaration public Action<bool> OnApplicationPause Field Value Type Description System.Action<T> bool | Improve this Doc View Source OnApplicationQuit Declaration public Action OnApplicationQuit Field Value Type Description System.Action Methods | Improve this Doc View Source InitializeAsync() Initializes the application event dispatcher and ensures it persists across scenes. Declaration public Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task Implements IService"
  },
  "api/UBP.Scripts.UBPServices.ApplicationEvents.html": {
    "href": "api/UBP.Scripts.UBPServices.ApplicationEvents.html",
    "title": "Namespace UBP.Scripts.UBPServices.ApplicationEvents | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.ApplicationEvents Classes ApplicationEventsDispatcher A MonoBehaviour that listens for Unity application events (focus, pause, quit, destroy) and forwards them to the centralized ApplicationEventsService . This enables non-MonoBehaviour systems to respond to Unity lifecycle events. ApplicationEventsService A centralized service that broadcasts application lifecycle events such as pause, focus, quit, and destroy. Allows non-MonoBehaviour systems to subscribe to Unity-level events."
  },
  "api/UBP.Scripts.UBPServices.Audio.AudioService.html": {
    "href": "api/UBP.Scripts.UBPServices.Audio.AudioService.html",
    "title": "Class AudioService | Ultimate Base Project",
    "keywords": "Class AudioService Handles audio playback for music and sound effects using a pooled system of AudioSource s. Supports volume control via AudioMixer groups and auto-recycling sources after playback. Inheritance object ConfiguredService AudioServiceConfig AudioService Implements IService Namespace : UBP Scripts UBPServices Audio Assembly : .dll Syntax public class AudioService : ConfiguredService<AudioServiceConfig>, IService Properties | Improve this Doc View Source ServiceConfig The configuration asset used by the service. Must be provided by the derived class. Declaration public override AudioServiceConfig ServiceConfig { get; } Property Value Type Description AudioServiceConfig Overrides ConfiguredService<AudioServiceConfig>.ServiceConfig Methods | Improve this Doc View Source InitializeAsync() Initializes the service by creating and configuring the audio source pool. Declaration public override Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task Overrides ConfiguredService<AudioServiceConfig>.InitializeAsync() | Improve this Doc View Source PlayMusic(AudioClip, float, float, bool) Plays a looping music track using an available audio source. Declaration public AudioSource PlayMusic(AudioClip audioClip, float volume = 1, float pitch = 1, bool loop = true) Parameters Type Name Description AudioClip audioClip The audio clip to play. float volume Playback volume (default: 1.0). float pitch Playback pitch (default: 1.0). bool loop Whether the music should loop (default: true). Returns Type Description AudioSource The AudioSource used to play the music. | Improve this Doc View Source PlaySFX(AudioClip, Vector3, float, float) Plays a one-shot sound effect (SFX) at a world position with optional volume and pitch. Declaration public AudioSource PlaySFX(AudioClip audioClip, Vector3 position, float volume = 1, float pitch = 1) Parameters Type Name Description AudioClip audioClip The audio clip to play. Vector3 position The world position for 3D sound playback. float volume Playback volume (default: 1.0). float pitch Playback pitch (default: 1.0). Returns Type Description AudioSource The AudioSource used to play the clip. | Improve this Doc View Source SetMusicVolume(float) Sets the volume for music using the linked AudioMixer group. Declaration public void SetMusicVolume(float volume) Parameters Type Name Description float volume Normalized volume between 0 and 1. Clamped internally. | Improve this Doc View Source SetSFXVolume(float) Sets the volume for sound effects (SFX) using the linked AudioMixer group. Declaration public void SetSFXVolume(float volume) Parameters Type Name Description float volume Normalized volume between 0 and 1. Clamped internally. Implements IService"
  },
  "api/UBP.Scripts.UBPServices.Audio.AudioServiceConfig.html": {
    "href": "api/UBP.Scripts.UBPServices.Audio.AudioServiceConfig.html",
    "title": "Class AudioServiceConfig | Ultimate Base Project",
    "keywords": "Class AudioServiceConfig Inheritance object Object ScriptableObject AudioServiceConfig Namespace : UBP Scripts UBPServices Audio Assembly : .dll Syntax [CreateAssetMenu(fileName = \"AudioServiceConfig\", menuName = \"Configs/Services/AudioServiceConfig\")] public class AudioServiceConfig : ScriptableObject Properties | Improve this Doc View Source AudioSourcesPoolSize The number of AudioSource instances to preallocate in the pool. This helps reduce runtime allocations for frequent audio playback. Declaration public int AudioSourcesPoolSize { get; } Property Value Type Description int | Improve this Doc View Source MusicAudioMixerGroup The AudioMixerGroup used to route music playback audio sources. Declaration public AudioMixerGroup MusicAudioMixerGroup { get; } Property Value Type Description AudioMixerGroup | Improve this Doc View Source SFXAudioMixerGroup The AudioMixerGroup used to route SFX (sound effects) playback audio sources. Declaration public AudioMixerGroup SFXAudioMixerGroup { get; } Property Value Type Description AudioMixerGroup"
  },
  "api/UBP.Scripts.UBPServices.Audio.AudioSourcesPool.html": {
    "href": "api/UBP.Scripts.UBPServices.Audio.AudioSourcesPool.html",
    "title": "Class AudioSourcesPool | Ultimate Base Project",
    "keywords": "Class AudioSourcesPool A reusable object pool for AudioSource instances. Prevents unnecessary allocation and destruction of AudioSources at runtime. Used internally by the AudioService . Inheritance object Object Component Behaviour MonoBehaviour AudioSourcesPool Namespace : UBP Scripts UBPServices Audio Assembly : .dll Syntax public class AudioSourcesPool : MonoBehaviour Methods | Improve this Doc View Source GetAudioSource() Retrieves an AudioSource from the pool or creates one if the pool is empty. The AudioSource will be activated and ready for playback. Declaration public AudioSource GetAudioSource() Returns Type Description AudioSource A prepared AudioSource instance. | Improve this Doc View Source Initialize() Initializes the pool by preallocating a number of AudioSources as defined in the AudioServiceConfig . Declaration public void Initialize() | Improve this Doc View Source ReleaseAfterPlay(AudioSource) Automatically returns an AudioSource to the pool once it finishes playing. Declaration public void ReleaseAfterPlay(AudioSource source) Parameters Type Name Description AudioSource source The AudioSource that should be recycled. | Improve this Doc View Source ReturnAudioSource(AudioSource) Returns an AudioSource to the pool after stopping playback and deactivating it. Declaration public void ReturnAudioSource(AudioSource audioSource) Parameters Type Name Description AudioSource audioSource The AudioSource to return to the pool."
  },
  "api/UBP.Scripts.UBPServices.Audio.html": {
    "href": "api/UBP.Scripts.UBPServices.Audio.html",
    "title": "Namespace UBP.Scripts.UBPServices.Audio | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Audio Classes AudioService Handles audio playback for music and sound effects using a pooled system of AudioSource s. Supports volume control via AudioMixer groups and auto-recycling sources after playback. AudioServiceConfig AudioSourcesPool A reusable object pool for AudioSource instances. Prevents unnecessary allocation and destruction of AudioSources at runtime. Used internally by the AudioService ."
  },
  "api/UBP.Scripts.UBPServices.Commands.html": {
    "href": "api/UBP.Scripts.UBPServices.Commands.html",
    "title": "Namespace UBP.Scripts.UBPServices.Commands | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Commands Interfaces ICommand<T> Defines a generic command interface that supports execution and undo operations. Follows the Command Pattern, allowing encapsulated actions with arguments."
  },
  "api/UBP.Scripts.UBPServices.Commands.ICommand-1.html": {
    "href": "api/UBP.Scripts.UBPServices.Commands.ICommand-1.html",
    "title": "Interface ICommand<T> | Ultimate Base Project",
    "keywords": "Interface ICommand<T> Defines a generic command interface that supports execution and undo operations. Follows the Command Pattern, allowing encapsulated actions with arguments. Namespace : UBP Scripts UBPServices Commands Assembly : .dll Syntax public interface ICommand<in T> Type Parameters Name Description T The type of arguments required to execute the command. Methods | Improve this Doc View Source Execute(T) Executes the command with the given arguments. Declaration void Execute(T arguments) Parameters Type Name Description T arguments The arguments required to execute the command. | Improve this Doc View Source Undo() Undoes the previously executed command. Declaration void Undo()"
  },
  "api/UBP.Scripts.UBPServices.ConfiguredService-1.html": {
    "href": "api/UBP.Scripts.UBPServices.ConfiguredService-1.html",
    "title": "Class ConfiguredService<TConfig> | Ultimate Base Project",
    "keywords": "Class ConfiguredService<TConfig> A base service implementation that uses a configuration object of type TConfig. Configs are loaded from the Resources folder at runtime. Inheritance object ConfiguredService<TConfig> AudioService DebugService FactoryService SaveService SceneService Implements IService Namespace : UBP Scripts UBPServices Assembly : .dll Syntax public abstract class ConfiguredService<TConfig> : IService where TConfig : ScriptableObject Type Parameters Name Description TConfig The ScriptableObject type used as config. Properties | Improve this Doc View Source ServiceConfig The configuration asset used by the service. Must be provided by the derived class. Declaration public abstract TConfig ServiceConfig { get; } Property Value Type Description TConfig Methods | Improve this Doc View Source InitializeAsync() Requires override in derived services to perform async initialization. Declaration public abstract Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task Implements IService"
  },
  "api/UBP.Scripts.UBPServices.Debugs.Console.CommandSuggestionsView.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.Console.CommandSuggestionsView.html",
    "title": "Class CommandSuggestionsView | Ultimate Base Project",
    "keywords": "Class CommandSuggestionsView Manages the UI display and navigation of suggested console commands during input. Allows keyboard navigation and selection using up/down and enter keys. Inheritance object Object Component Behaviour MonoBehaviour CommandSuggestionsView Namespace : UBP Scripts UBPServices Debugs Console Assembly : .dll Syntax public class CommandSuggestionsView : MonoBehaviour Fields | Improve this Doc View Source OnCommandSelected Declaration public Action<ConsoleCommand> OnCommandSelected Field Value Type Description System.Action<T> ConsoleCommand Properties | Improve this Doc View Source IsFocused Declaration public bool IsFocused { get; } Property Value Type Description bool Methods | Improve this Doc View Source DeselectSuggestion() Resets selection state to unfocused (none selected). Declaration public void DeselectSuggestion() | Improve this Doc View Source NavigateThroughSuggestions(int) Navigates through the suggestion list using the provided direction. Declaration public void NavigateThroughSuggestions(int direction) Parameters Type Name Description int direction -1 for up, 1 for down. | Improve this Doc View Source SelectSuggestion() Executes the currently selected suggestion and deselects all. Declaration public void SelectSuggestion() | Improve this Doc View Source Setup(List<ConsoleCommand>) Creates or reuses UI elements to display the given list of command suggestions. Declaration public void Setup(List<ConsoleCommand> commands) Parameters Type Name Description System.Collections.Generic.List<T> ConsoleCommand commands A list of available commands to suggest."
  },
  "api/UBP.Scripts.UBPServices.Debugs.Console.ConsoleCanvas.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.Console.ConsoleCanvas.html",
    "title": "Class ConsoleCanvas | Ultimate Base Project",
    "keywords": "Class ConsoleCanvas Manages the root canvas for the in-game debug console interface. Instantiates and hosts the ConsoleView . Handles cleanup and closing logic for the entire console UI. Inheritance object Object Component Behaviour MonoBehaviour ConsoleCanvas Namespace : UBP Scripts UBPServices Debugs Console Assembly : .dll Syntax public class ConsoleCanvas : MonoBehaviour Methods | Improve this Doc View Source Close() Declaration public void Close()"
  },
  "api/UBP.Scripts.UBPServices.Debugs.Console.ConsoleInputView.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.Console.ConsoleInputView.html",
    "title": "Class ConsoleInputView | Ultimate Base Project",
    "keywords": "Class ConsoleInputView Manages user input for executing console commands within the debug console interface. Filters and sanitizes user input, handles command suggestion interactions, and executes valid commands. Inheritance object Object Component Behaviour MonoBehaviour ConsoleInputView Namespace : UBP Scripts UBPServices Debugs Console Assembly : .dll Syntax public class ConsoleInputView : MonoBehaviour Properties | Improve this Doc View Source CanExecuteCommand Determines whether the current input is valid and the user is able to execute a command. Declaration public bool CanExecuteCommand { get; } Property Value Type Description bool Methods | Improve this Doc View Source TryExecuteCommand() Attempts to parse and execute the command entered by the user. Declaration public void TryExecuteCommand()"
  },
  "api/UBP.Scripts.UBPServices.Debugs.Console.ConsoleView.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.Console.ConsoleView.html",
    "title": "Class ConsoleView | Ultimate Base Project",
    "keywords": "Class ConsoleView Manages the main in-game debug console UI, including input, suggestions, log rendering, and state persistence. Inheritance object Object Component Behaviour MonoBehaviour ConsoleView Namespace : UBP Scripts UBPServices Debugs Console Assembly : .dll Syntax public class ConsoleView : MonoBehaviour Methods | Improve this Doc View Source Setup(Action) Registers a callback to be invoked when the console is closed. Declaration public void Setup(Action onCloseCallback) Parameters Type Name Description System.Action onCloseCallback Callback to invoke on console close."
  },
  "api/UBP.Scripts.UBPServices.Debugs.Console.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.Console.html",
    "title": "Namespace UBP.Scripts.UBPServices.Debugs.Console | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Debugs.Console Classes CommandSuggestionsView Manages the UI display and navigation of suggested console commands during input. Allows keyboard navigation and selection using up/down and enter keys. ConsoleCanvas Manages the root canvas for the in-game debug console interface. Instantiates and hosts the ConsoleView . Handles cleanup and closing logic for the entire console UI. ConsoleInputView Manages user input for executing console commands within the debug console interface. Filters and sanitizes user input, handles command suggestion interactions, and executes valid commands. ConsoleView Manages the main in-game debug console UI, including input, suggestions, log rendering, and state persistence. SuggestedCommandView Represents a visual UI element for displaying a suggested console command. Handles display and selection highlighting for individual commands in the suggestion list."
  },
  "api/UBP.Scripts.UBPServices.Debugs.Console.SuggestedCommandView.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.Console.SuggestedCommandView.html",
    "title": "Class SuggestedCommandView | Ultimate Base Project",
    "keywords": "Class SuggestedCommandView Represents a visual UI element for displaying a suggested console command. Handles display and selection highlighting for individual commands in the suggestion list. Inheritance object Object Component Behaviour MonoBehaviour SuggestedCommandView Namespace : UBP Scripts UBPServices Debugs Console Assembly : .dll Syntax public class SuggestedCommandView : MonoBehaviour Properties | Improve this Doc View Source ConsoleCommand Declaration public ConsoleCommand ConsoleCommand { get; } Property Value Type Description ConsoleCommand | Improve this Doc View Source IsSelected Declaration public bool IsSelected { get; set; } Property Value Type Description bool Methods | Improve this Doc View Source SetSelected(bool) Sets the visual selection state of the view, updating background color accordingly. Declaration public void SetSelected(bool isSelected) Parameters Type Name Description bool isSelected True to highlight the view, false to use the default color. | Improve this Doc View Source Setup(ConsoleCommand) Initializes the view with the specified console command and updates its text label. Declaration public void Setup(ConsoleCommand consoleCommand) Parameters Type Name Description ConsoleCommand consoleCommand The command to associate with this view."
  },
  "api/UBP.Scripts.UBPServices.Debugs.ConsoleCommands.ConsoleCommand.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.ConsoleCommands.ConsoleCommand.html",
    "title": "Class ConsoleCommand | Ultimate Base Project",
    "keywords": "Class ConsoleCommand Represents the base class for all in-game console commands. Each command has a name derived from its class name and a set of required argument types. Inheritance object ConsoleCommand SampleConsoleCommand Implements ICommand object Namespace : UBP Scripts UBPServices Debugs ConsoleCommands Assembly : .dll Syntax public abstract class ConsoleCommand : ICommand<object[]> Constructors | Improve this Doc View Source ConsoleCommand(Type[]) Initializes a new instance of the ConsoleCommand class with specified argument types. Declaration public ConsoleCommand(Type[] requiredArguments) Parameters Type Name Description System.Type requiredArguments An array of types representing the arguments required by the command. Properties | Improve this Doc View Source Name Gets the name of the command, derived from the class name. Declaration public string Name { get; } Property Value Type Description string | Improve this Doc View Source RequiredArguments Gets or sets the expected types of arguments this command requires. Declaration public Type[] RequiredArguments { get; protected set; } Property Value Type Description System.Type An array of System.Type indicating argument types. Methods | Improve this Doc View Source Execute(object[]) Executes the command with the given arguments. Declaration public abstract void Execute(object[] arguments) Parameters Type Name Description object arguments An array of objects representing the arguments passed to the command. | Improve this Doc View Source GetCommandNameWithArguments() Returns a formatted command name with its required argument types. Declaration public string GetCommandNameWithArguments() Returns Type Description string A string representing the command with its argument type placeholders. | Improve this Doc View Source Undo() Reverts or undoes the effect of the command if supported. Declaration public abstract void Undo() Implements ICommand<T>"
  },
  "api/UBP.Scripts.UBPServices.Debugs.ConsoleCommands.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.ConsoleCommands.html",
    "title": "Namespace UBP.Scripts.UBPServices.Debugs.ConsoleCommands | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Debugs.ConsoleCommands Classes ConsoleCommand Represents the base class for all in-game console commands. Each command has a name derived from its class name and a set of required argument types. SampleConsoleCommand A sample implementation of ConsoleCommand used for demonstration or testing."
  },
  "api/UBP.Scripts.UBPServices.Debugs.ConsoleCommands.SampleConsoleCommand.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.ConsoleCommands.SampleConsoleCommand.html",
    "title": "Class SampleConsoleCommand | Ultimate Base Project",
    "keywords": "Class SampleConsoleCommand A sample implementation of ConsoleCommand used for demonstration or testing. Inheritance object ConsoleCommand SampleConsoleCommand Implements ICommand object Inherited Members ConsoleCommand.Name ConsoleCommand.RequiredArguments ConsoleCommand.GetCommandNameWithArguments() Namespace : UBP Scripts UBPServices Debugs ConsoleCommands Assembly : .dll Syntax public class SampleConsoleCommand : ConsoleCommand, ICommand<object[]> Constructors | Improve this Doc View Source SampleConsoleCommand(Type[]) Initializes a new instance of the ConsoleCommand class with specified argument types. Declaration public SampleConsoleCommand(Type[] requiredArguments) Parameters Type Name Description System.Type requiredArguments An array of types representing the arguments required by the command. Methods | Improve this Doc View Source Execute(object[]) Executes the sample command and logs its invocation with arguments to the Unity console. Declaration public override void Execute(object[] arguments) Parameters Type Name Description object arguments The arguments passed to the command. Overrides ConsoleCommand.Execute(object[]) | Improve this Doc View Source Undo() Reverts or undoes the effect of the command if supported. Declaration public override void Undo() Overrides ConsoleCommand.Undo() Implements ICommand<T>"
  },
  "api/UBP.Scripts.UBPServices.Debugs.DebugService.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.DebugService.html",
    "title": "Class DebugService | Ultimate Base Project",
    "keywords": "Class DebugService A service that provides runtime debugging functionality during development builds. Handles Unity log message capture, bounded log queue storage, and in-game console UI with command registration. Inheritance object ConfiguredService DebugServiceConfig DebugService Implements IService IUpdatable Namespace : UBP Scripts UBPServices Debugs Assembly : .dll Syntax public class DebugService : ConfiguredService<DebugServiceConfig>, IService, IUpdatable Fields | Improve this Doc View Source OnLogMessageReceived Event triggered when a new log message is received. Declaration public Action<LogMessageData> OnLogMessageReceived Field Value Type Description System.Action<T> LogMessageData Properties | Improve this Doc View Source ConsoleCommands Gets the registered set of console commands. Declaration public HashSet<ConsoleCommand> ConsoleCommands { get; } Property Value Type Description System.Collections.Generic.HashSet<T> ConsoleCommand | Improve this Doc View Source LogMessagesQueue Gets a bounded queue that stores recent log messages. Declaration public BoundedQueue<LogMessageData> LogMessagesQueue { get; } Property Value Type Description BoundedQueue LogMessageData | Improve this Doc View Source ServiceConfig Returns the configuration associated with the debug service. Declaration public override DebugServiceConfig ServiceConfig { get; } Property Value Type Description DebugServiceConfig Overrides ConfiguredService<DebugServiceConfig>.ServiceConfig Methods | Improve this Doc View Source InitializeAsync() Asynchronously initializes the service, registering log handlers and setting up internal structures. Declaration public override Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task Overrides ConfiguredService<DebugServiceConfig>.InitializeAsync() | Improve this Doc View Source RegisterCommand(ConsoleCommand) Registers a new console command for use in the in-game debug console. Declaration public void RegisterCommand(ConsoleCommand command) Parameters Type Name Description ConsoleCommand command The command to register. | Improve this Doc View Source UnregisterCommand(ConsoleCommand) Unregisters a console command, removing it from the console interface. Declaration public void UnregisterCommand(ConsoleCommand command) Parameters Type Name Description ConsoleCommand command The command to unregister. | Improve this Doc View Source Update() Called every frame to listen for input and toggle the console UI if applicable. Declaration public void Update() Implements IService IUpdatable"
  },
  "api/UBP.Scripts.UBPServices.Debugs.DebugServiceConfig.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.DebugServiceConfig.html",
    "title": "Class DebugServiceConfig | Ultimate Base Project",
    "keywords": "Class DebugServiceConfig Inheritance object Object ScriptableObject DebugServiceConfig Namespace : UBP Scripts UBPServices Debugs Assembly : .dll Syntax [CreateAssetMenu(fileName = \"DebugServiceConfig\", menuName = \"Configs/Services/DebugServiceConfig\")] public class DebugServiceConfig : ScriptableObject Properties | Improve this Doc View Source ConsoleCanvasPrefab Prefab of the console UI canvas shown in play mode. Declaration public ConsoleCanvas ConsoleCanvasPrefab { get; } Property Value Type Description ConsoleCanvas | Improve this Doc View Source ErrorMessageColor Declaration public Color ErrorMessageColor { get; } Property Value Type Description Color | Improve this Doc View Source LogMessageColor Declaration public Color LogMessageColor { get; } Property Value Type Description Color | Improve this Doc View Source MaxLogMessagesCapacity Maximum number of log messages retained in the debug console. Older messages are discarded when capacity is exceeded. Declaration public int MaxLogMessagesCapacity { get; set; } Property Value Type Description int | Improve this Doc View Source OpenConsoleKey Key used to toggle the console window at runtime. Declaration public KeyCode OpenConsoleKey { get; } Property Value Type Description KeyCode | Improve this Doc View Source WarningMessageColor Declaration public Color WarningMessageColor { get; } Property Value Type Description Color"
  },
  "api/UBP.Scripts.UBPServices.Debugs.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.html",
    "title": "Namespace UBP.Scripts.UBPServices.Debugs | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Debugs Classes DebugService A service that provides runtime debugging functionality during development builds. Handles Unity log message capture, bounded log queue storage, and in-game console UI with command registration. DebugServiceConfig LogMessageData Represents a structured container for Unity log message data. LogMessageView Represents a single log message entry in the debug console. Displays the log type, message content, stack trace, and applies coloring/styling."
  },
  "api/UBP.Scripts.UBPServices.Debugs.LogMessageData.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.LogMessageData.html",
    "title": "Class LogMessageData | Ultimate Base Project",
    "keywords": "Class LogMessageData Represents a structured container for Unity log message data. Inheritance object LogMessageData Namespace : UBP Scripts UBPServices Debugs Assembly : .dll Syntax public class LogMessageData Constructors | Improve this Doc View Source LogMessageData(string, string, LogType) Initializes a new instance of the LogMessageData class with the specified log data. Declaration public LogMessageData(string condition, string stackTrace, LogType type) Parameters Type Name Description string condition The main message or condition of the log entry. string stackTrace The stack trace related to the log message. LogType type The severity or category of the log message. Properties | Improve this Doc View Source Condition Declaration public string Condition { get; } Property Value Type Description string | Improve this Doc View Source StackTrace Declaration public string StackTrace { get; } Property Value Type Description string | Improve this Doc View Source Type Declaration public LogType Type { get; } Property Value Type Description LogType"
  },
  "api/UBP.Scripts.UBPServices.Debugs.LogMessageView.html": {
    "href": "api/UBP.Scripts.UBPServices.Debugs.LogMessageView.html",
    "title": "Class LogMessageView | Ultimate Base Project",
    "keywords": "Class LogMessageView Represents a single log message entry in the debug console. Displays the log type, message content, stack trace, and applies coloring/styling. Inheritance object Object Component Behaviour MonoBehaviour LogMessageView Namespace : UBP Scripts UBPServices Debugs Assembly : .dll Syntax public class LogMessageView : MonoBehaviour Methods | Improve this Doc View Source Setup(LogMessageData) Initializes the view with a log message's content and visual formatting. Declaration public void Setup(LogMessageData logMessageData) Parameters Type Name Description LogMessageData logMessageData Data containing log type, message, and stack trace."
  },
  "api/UBP.Scripts.UBPServices.Editor.CoreSettingCategory.html": {
    "href": "api/UBP.Scripts.UBPServices.Editor.CoreSettingCategory.html",
    "title": "Class CoreSettingCategory | Ultimate Base Project",
    "keywords": "Class CoreSettingCategory Represents a static configuration section (like General or Data). Inheritance object SettingCategory CoreSettingCategory Inherited Members SettingCategory.DisplayName SettingCategory.ConfigPath Namespace : UBP Scripts UBPServices Editor Assembly : .dll Syntax public class CoreSettingCategory : SettingCategory Constructors | Improve this Doc View Source CoreSettingCategory(string, string) Declaration public CoreSettingCategory(string displayName, string configPath) Parameters Type Name Description string displayName string configPath"
  },
  "api/UBP.Scripts.UBPServices.Editor.html": {
    "href": "api/UBP.Scripts.UBPServices.Editor.html",
    "title": "Namespace UBP.Scripts.UBPServices.Editor | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Editor Classes CoreSettingCategory Represents a static configuration section (like General or Data). ServiceSettingCategory Represents a dynamic service-based configuration section discovered at runtime. SettingCategory Base class for defining configurable categories shown in the sidebar of the UBP editor window. UltimateBaseProjectWindow A custom Unity Editor window for configuring UBP service settings and core configurations. Mimics Unity's Project Settings UI with a category list on the left and settings panel on the right."
  },
  "api/UBP.Scripts.UBPServices.Editor.ServiceSettingCategory.html": {
    "href": "api/UBP.Scripts.UBPServices.Editor.ServiceSettingCategory.html",
    "title": "Class ServiceSettingCategory | Ultimate Base Project",
    "keywords": "Class ServiceSettingCategory Represents a dynamic service-based configuration section discovered at runtime. Inheritance object SettingCategory ServiceSettingCategory Inherited Members SettingCategory.DisplayName SettingCategory.ConfigPath Namespace : UBP Scripts UBPServices Editor Assembly : .dll Syntax public class ServiceSettingCategory : SettingCategory Constructors | Improve this Doc View Source ServiceSettingCategory(string, string) Declaration public ServiceSettingCategory(string displayName, string configPath) Parameters Type Name Description string displayName string configPath"
  },
  "api/UBP.Scripts.UBPServices.Editor.SettingCategory.html": {
    "href": "api/UBP.Scripts.UBPServices.Editor.SettingCategory.html",
    "title": "Class SettingCategory | Ultimate Base Project",
    "keywords": "Class SettingCategory Base class for defining configurable categories shown in the sidebar of the UBP editor window. Inheritance object SettingCategory CoreSettingCategory ServiceSettingCategory Namespace : UBP Scripts UBPServices Editor Assembly : .dll Syntax public abstract class SettingCategory Constructors | Improve this Doc View Source SettingCategory(string, string) Declaration public SettingCategory(string displayName, string configPath) Parameters Type Name Description string displayName string configPath Properties | Improve this Doc View Source ConfigPath The Resources path to the ScriptableObject config for this category. Declaration public string ConfigPath { get; } Property Value Type Description string | Improve this Doc View Source DisplayName The display name shown in the sidebar. Declaration public string DisplayName { get; } Property Value Type Description string"
  },
  "api/UBP.Scripts.UBPServices.Editor.UltimateBaseProjectWindow.html": {
    "href": "api/UBP.Scripts.UBPServices.Editor.UltimateBaseProjectWindow.html",
    "title": "Class UltimateBaseProjectWindow | Ultimate Base Project",
    "keywords": "Class UltimateBaseProjectWindow A custom Unity Editor window for configuring UBP service settings and core configurations. Mimics Unity's Project Settings UI with a category list on the left and settings panel on the right. Inheritance object Object ScriptableObject EditorWindow UltimateBaseProjectWindow Namespace : UBP Scripts UBPServices Editor Assembly : .dll Syntax public class UltimateBaseProjectWindow : EditorWindow Methods | Improve this Doc View Source ShowWindow() Opens the UBP settings window from the Unity top menu. Declaration [MenuItem(\"Window/YGames/Ultimate Base Project\")] public static void ShowWindow()"
  },
  "api/UBP.Scripts.UBPServices.Factory.FactoryService.html": {
    "href": "api/UBP.Scripts.UBPServices.Factory.FactoryService.html",
    "title": "Class FactoryService | Ultimate Base Project",
    "keywords": "Class FactoryService A service responsible for automatically injecting dependencies or running post-processing logic on objects, using registered IPostProcessor implementations. Inheritance object ConfiguredService FactoryServiceConfig FactoryService Implements IService Namespace : UBP Scripts UBPServices Factory Assembly : .dll Syntax public class FactoryService : ConfiguredService<FactoryServiceConfig>, IService Properties | Improve this Doc View Source ServiceConfig Returns the configuration associated with the factory service. Declaration public override FactoryServiceConfig ServiceConfig { get; } Property Value Type Description FactoryServiceConfig Overrides ConfiguredService<FactoryServiceConfig>.ServiceConfig Methods | Improve this Doc View Source InitializeAsync() Initializes the service by discovering and registering all IPostProcessor implementations. Declaration public override Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task Overrides ConfiguredService<FactoryServiceConfig>.InitializeAsync() | Improve this Doc View Source InjectDependency(object) Applies all registered IPostProcessor instances to the given target object. This is commonly used for dependency injection or object decoration. Declaration public void InjectDependency(object target) Parameters Type Name Description object target The object to process. Implements IService"
  },
  "api/UBP.Scripts.UBPServices.Factory.FactoryServiceConfig.html": {
    "href": "api/UBP.Scripts.UBPServices.Factory.FactoryServiceConfig.html",
    "title": "Class FactoryServiceConfig | Ultimate Base Project",
    "keywords": "Class FactoryServiceConfig Inheritance object Object ScriptableObject FactoryServiceConfig Namespace : UBP Scripts UBPServices Factory Assembly : .dll Syntax [CreateAssetMenu(fileName = \"FactoryServiceConfig\", menuName = \"Configs/Services/FactoryServiceConfig\")] public class FactoryServiceConfig : ScriptableObject"
  },
  "api/UBP.Scripts.UBPServices.Factory.html": {
    "href": "api/UBP.Scripts.UBPServices.Factory.html",
    "title": "Namespace UBP.Scripts.UBPServices.Factory | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Factory Classes FactoryService A service responsible for automatically injecting dependencies or running post-processing logic on objects, using registered IPostProcessor implementations. FactoryServiceConfig"
  },
  "api/UBP.Scripts.UBPServices.Factory.PostProcessors.html": {
    "href": "api/UBP.Scripts.UBPServices.Factory.PostProcessors.html",
    "title": "Namespace UBP.Scripts.UBPServices.Factory.PostProcessors | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Factory.PostProcessors Classes UpdaterPostProcessor Registers any object that implements one of the update-related interfaces with the UpdaterService . This allows non-MonoBehaviour objects to receive Update , FixedUpdate , or LateUpdate events. Interfaces IPostProcessor Interface used by the FactoryService to define post-construction behavior for objects. Implementations can inject dependencies, register systems, or perform other setup logic."
  },
  "api/UBP.Scripts.UBPServices.Factory.PostProcessors.IPostProcessor.html": {
    "href": "api/UBP.Scripts.UBPServices.Factory.PostProcessors.IPostProcessor.html",
    "title": "Interface IPostProcessor | Ultimate Base Project",
    "keywords": "Interface IPostProcessor Interface used by the FactoryService to define post-construction behavior for objects. Implementations can inject dependencies, register systems, or perform other setup logic. Namespace : UBP Scripts UBPServices Factory PostProcessors Assembly : .dll Syntax public interface IPostProcessor Methods | Improve this Doc View Source Process(object) Processes the specified object after creation or injection. Declaration void Process(object target) Parameters Type Name Description object target The object to process."
  },
  "api/UBP.Scripts.UBPServices.Factory.PostProcessors.UpdaterPostProcessor.html": {
    "href": "api/UBP.Scripts.UBPServices.Factory.PostProcessors.UpdaterPostProcessor.html",
    "title": "Class UpdaterPostProcessor | Ultimate Base Project",
    "keywords": "Class UpdaterPostProcessor Registers any object that implements one of the update-related interfaces with the UpdaterService . This allows non-MonoBehaviour objects to receive Update , FixedUpdate , or LateUpdate events. Inheritance object UpdaterPostProcessor Implements IPostProcessor Namespace : UBP Scripts UBPServices Factory PostProcessors Assembly : .dll Syntax public class UpdaterPostProcessor : IPostProcessor Methods | Improve this Doc View Source Process(object) Processes the specified object after creation or injection. Declaration public void Process(object target) Parameters Type Name Description object target The object to process. Implements IPostProcessor"
  },
  "api/UBP.Scripts.UBPServices.html": {
    "href": "api/UBP.Scripts.UBPServices.html",
    "title": "Namespace UBP.Scripts.UBPServices | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices Classes ConfiguredService<TConfig> A base service implementation that uses a configuration object of type TConfig. Configs are loaded from the Resources folder at runtime. Services Global manager for all registered services implementing IService. Handles service discovery, initialization, and access. Interfaces IService Base interface for all UBP services. Services are auto-registered and initialized on application startup."
  },
  "api/UBP.Scripts.UBPServices.IService.html": {
    "href": "api/UBP.Scripts.UBPServices.IService.html",
    "title": "Interface IService | Ultimate Base Project",
    "keywords": "Interface IService Base interface for all UBP services. Services are auto-registered and initialized on application startup. Namespace : UBP Scripts UBPServices Assembly : .dll Syntax public interface IService Methods | Improve this Doc View Source InitializeAsync() Initializes the service asynchronously. This is called automatically after all services are registered. Declaration Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task"
  },
  "api/UBP.Scripts.UBPServices.Saves.Editor.html": {
    "href": "api/UBP.Scripts.UBPServices.Saves.Editor.html",
    "title": "Namespace UBP.Scripts.UBPServices.Saves.Editor | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Saves.Editor Classes SaveServiceConfigEditor"
  },
  "api/UBP.Scripts.UBPServices.Saves.Editor.SaveServiceConfigEditor.html": {
    "href": "api/UBP.Scripts.UBPServices.Saves.Editor.SaveServiceConfigEditor.html",
    "title": "Class SaveServiceConfigEditor | Ultimate Base Project",
    "keywords": "Class SaveServiceConfigEditor Inheritance object Object ScriptableObject Editor SaveServiceConfigEditor Namespace : UBP Scripts UBPServices Saves Editor Assembly : .dll Syntax [CustomEditor(typeof(SaveServiceConfig))] public class SaveServiceConfigEditor : Editor Methods | Improve this Doc View Source OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides Editor.OnInspectorGUI()"
  },
  "api/UBP.Scripts.UBPServices.Saves.html": {
    "href": "api/UBP.Scripts.UBPServices.Saves.html",
    "title": "Namespace UBP.Scripts.UBPServices.Saves | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Saves Classes SaveService A service for saving and loading persistent game data to disk. Supports serialization, backup recovery, and async file IO. SaveServiceConfig"
  },
  "api/UBP.Scripts.UBPServices.Saves.SaveService.html": {
    "href": "api/UBP.Scripts.UBPServices.Saves.SaveService.html",
    "title": "Class SaveService | Ultimate Base Project",
    "keywords": "Class SaveService A service for saving and loading persistent game data to disk. Supports serialization, backup recovery, and async file IO. Inheritance object ConfiguredService SaveServiceConfig SaveService Implements IService Namespace : UBP Scripts UBPServices Saves Assembly : .dll Syntax public class SaveService : ConfiguredService<SaveServiceConfig>, IService Properties | Improve this Doc View Source ServiceConfig Returns the active config used by this service. Declaration public override SaveServiceConfig ServiceConfig { get; } Property Value Type Description SaveServiceConfig Overrides ConfiguredService<SaveServiceConfig>.ServiceConfig Methods | Improve this Doc View Source InitializeAsync() Initializes the service and sets the default serializer. Declaration public override Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task Overrides ConfiguredService<SaveServiceConfig>.InitializeAsync() | Improve this Doc View Source LoadAsync<T>(string) Attempts to load and deserialize data asynchronously. Falls back to backup file if the main file is missing or corrupted. Declaration public Task<T> LoadAsync<T>(string fileName) Parameters Type Name Description string fileName Returns Type Description System.Threading.Tasks.Task<TResult> Type Parameters Name Description T | Improve this Doc View Source Load<T>(string) Synchronously loads and deserializes data from a save file or its backup. Declaration public T Load<T>(string fileName) Parameters Type Name Description string fileName Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source SaveAsync<T>(string, T) Saves data asynchronously, using a temporary file first and falling back to a backup system. Declaration public Task SaveAsync<T>(string fileName, T data) Parameters Type Name Description string fileName The save file name (without extension). T data The data object to save. Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T The type of data to serialize. | Improve this Doc View Source Save<T>(string, T) Synchronously saves data using the same logic as async, including backup handling. Declaration public void Save<T>(string fileName, T data) Parameters Type Name Description string fileName The save file name (without extension). T data The data object to save. Type Parameters Name Description T The type of data to serialize. Implements IService"
  },
  "api/UBP.Scripts.UBPServices.Saves.SaveServiceConfig.html": {
    "href": "api/UBP.Scripts.UBPServices.Saves.SaveServiceConfig.html",
    "title": "Class SaveServiceConfig | Ultimate Base Project",
    "keywords": "Class SaveServiceConfig Inheritance object Object ScriptableObject SaveServiceConfig Namespace : UBP Scripts UBPServices Saves Assembly : .dll Syntax [CreateAssetMenu(fileName = \"SaveServiceConfig\", menuName = \"Configs/Services/SaveServiceConfig\")] public class SaveServiceConfig : ScriptableObject Properties | Improve this Doc View Source SavesRootFolder The root folder name under Application.persistentDataPath where save files will be stored. Declaration public string SavesRootFolder { get; } Property Value Type Description string Methods | Improve this Doc View Source ShowSaveRootFolder() Declaration public void ShowSaveRootFolder()"
  },
  "api/UBP.Scripts.UBPServices.Saves.Serializers.html": {
    "href": "api/UBP.Scripts.UBPServices.Saves.Serializers.html",
    "title": "Namespace UBP.Scripts.UBPServices.Saves.Serializers | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Saves.Serializers Classes JSONSaveSerializer Default JSON-based implementation of SaveSerializer using Unity's built-in JsonUtility. Suitable for simple data structures that follow Unity's serialization rules. SaveSerializer Abstract base class for implementing different save data serialization formats. Allows plugging in custom serializers like JSON, binary, XML, etc."
  },
  "api/UBP.Scripts.UBPServices.Saves.Serializers.JSONSaveSerializer.html": {
    "href": "api/UBP.Scripts.UBPServices.Saves.Serializers.JSONSaveSerializer.html",
    "title": "Class JSONSaveSerializer | Ultimate Base Project",
    "keywords": "Class JSONSaveSerializer Default JSON-based implementation of SaveSerializer using Unity's built-in JsonUtility. Suitable for simple data structures that follow Unity's serialization rules. Inheritance object SaveSerializer JSONSaveSerializer Namespace : UBP Scripts UBPServices Saves Serializers Assembly : .dll Syntax [Serializable] public class JSONSaveSerializer : SaveSerializer Methods | Improve this Doc View Source Deserialize<T>(string) Deserializes a string into an object of type T. Declaration public override T Deserialize<T>(string data) Parameters Type Name Description string data The serialized string. Returns Type Description T The deserialized object, or default if failed. Type Parameters Name Description T The type to deserialize into. Overrides SaveSerializer.Deserialize<T>(string) | Improve this Doc View Source Serialize<T>(T) Declaration public override string Serialize<T>(T data) Parameters Type Name Description T data Returns Type Description string Type Parameters Name Description T Overrides SaveSerializer.Serialize<T>(T)"
  },
  "api/UBP.Scripts.UBPServices.Saves.Serializers.SaveSerializer.html": {
    "href": "api/UBP.Scripts.UBPServices.Saves.Serializers.SaveSerializer.html",
    "title": "Class SaveSerializer | Ultimate Base Project",
    "keywords": "Class SaveSerializer Abstract base class for implementing different save data serialization formats. Allows plugging in custom serializers like JSON, binary, XML, etc. Inheritance object SaveSerializer JSONSaveSerializer Namespace : UBP Scripts UBPServices Saves Serializers Assembly : .dll Syntax [Serializable] public abstract class SaveSerializer Methods | Improve this Doc View Source Deserialize<T>(string) Deserializes a string into an object of type T. Declaration public abstract T Deserialize<T>(string data) Parameters Type Name Description string data The serialized string. Returns Type Description T The deserialized object, or default if failed. Type Parameters Name Description T The type to deserialize into. | Improve this Doc View Source Serialize<T>(T) Declaration public abstract string Serialize<T>(T data) Parameters Type Name Description T data Returns Type Description string Type Parameters Name Description T"
  },
  "api/UBP.Scripts.UBPServices.Scenes.html": {
    "href": "api/UBP.Scripts.UBPServices.Scenes.html",
    "title": "Namespace UBP.Scripts.UBPServices.Scenes | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Scenes Classes SceneService Service responsible for loading, unloading, and managing scenes in the project. Supports both synchronous and asynchronous operations, with optional progress callbacks. SceneServiceConfig"
  },
  "api/UBP.Scripts.UBPServices.Scenes.SceneService.html": {
    "href": "api/UBP.Scripts.UBPServices.Scenes.SceneService.html",
    "title": "Class SceneService | Ultimate Base Project",
    "keywords": "Class SceneService Service responsible for loading, unloading, and managing scenes in the project. Supports both synchronous and asynchronous operations, with optional progress callbacks. Inheritance object ConfiguredService SceneServiceConfig SceneService Implements IService Namespace : UBP Scripts UBPServices Scenes Assembly : .dll Syntax public class SceneService : ConfiguredService<SceneServiceConfig>, IService Properties | Improve this Doc View Source ServiceConfig Declaration public override SceneServiceConfig ServiceConfig { get; } Property Value Type Description SceneServiceConfig Overrides ConfiguredService<SceneServiceConfig>.ServiceConfig Methods | Improve this Doc View Source GetActiveScene() Returns the currently active scene. Declaration public Scene GetActiveScene() Returns Type Description Scene | Improve this Doc View Source GetLoadedScenes() Returns the list of currently tracked loaded scenes. Declaration public List<Scene> GetLoadedScenes() Returns Type Description System.Collections.Generic.List<T> Scene | Improve this Doc View Source GetScene(int) Gets a scene by its build index. Declaration public Scene GetScene(int sceneIndex) Parameters Type Name Description int sceneIndex Returns Type Description Scene | Improve this Doc View Source GetScene(string) Gets a scene by name. Declaration public Scene GetScene(string sceneName) Parameters Type Name Description string sceneName Returns Type Description Scene | Improve this Doc View Source InitializeAsync() Initializes the SceneService and resets the loaded scene list. Declaration public override Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task Overrides ConfiguredService<SceneServiceConfig>.InitializeAsync() | Improve this Doc View Source LoadScene(int, LoadSceneMode) Synchronously loads a scene by build index. Declaration public void LoadScene(int sceneIndex, LoadSceneMode mode = LoadSceneMode.Single) Parameters Type Name Description int sceneIndex LoadSceneMode mode | Improve this Doc View Source LoadScene(string, LoadSceneMode) Synchronously loads a scene by name. Declaration public void LoadScene(string sceneName, LoadSceneMode mode = LoadSceneMode.Single) Parameters Type Name Description string sceneName LoadSceneMode mode | Improve this Doc View Source LoadSceneAsync(int, Action<float>, Action, bool, LoadSceneMode) Loads a scene asynchronously by index with optional callbacks. Declaration public Task LoadSceneAsync(int sceneIndex, Action<float> progressCallback, Action completionCallback, bool allowSceneActivation = true, LoadSceneMode mode = LoadSceneMode.Single) Parameters Type Name Description int sceneIndex System.Action<T> float progressCallback System.Action completionCallback bool allowSceneActivation LoadSceneMode mode Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source LoadSceneAsync(int, LoadSceneMode) Asynchronously loads a scene by build index. Declaration public Task LoadSceneAsync(int sceneIndex, LoadSceneMode mode = LoadSceneMode.Single) Parameters Type Name Description int sceneIndex LoadSceneMode mode Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source LoadSceneAsync(string, Action<float>, Action, bool, LoadSceneMode) Loads a scene asynchronously with optional progress and completion callbacks. Declaration public Task LoadSceneAsync(string sceneName, Action<float> progressCallback, Action completionCallback, bool allowSceneActivation = true, LoadSceneMode mode = LoadSceneMode.Single) Parameters Type Name Description string sceneName System.Action<T> float progressCallback System.Action completionCallback bool allowSceneActivation LoadSceneMode mode Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source LoadSceneAsync(string, LoadSceneMode) Asynchronously loads a scene by name. Declaration public Task LoadSceneAsync(string sceneName, LoadSceneMode mode = LoadSceneMode.Single) Parameters Type Name Description string sceneName LoadSceneMode mode Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source SetActiveScene(Scene) Sets a scene as the active scene. Declaration public void SetActiveScene(Scene scene) Parameters Type Name Description Scene scene | Improve this Doc View Source UnloadScene(int) Unloads a scene by build index. Declaration public void UnloadScene(int sceneIndex) Parameters Type Name Description int sceneIndex | Improve this Doc View Source UnloadScene(string) Unloads a scene by name. Declaration public void UnloadScene(string sceneName) Parameters Type Name Description string sceneName | Improve this Doc View Source UnloadSceneAsync(int) Asynchronously unloads a scene by build index. Declaration public Task UnloadSceneAsync(int sceneIndex) Parameters Type Name Description int sceneIndex Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source UnloadSceneAsync(string) Asynchronously unloads a scene by name. Declaration public Task UnloadSceneAsync(string sceneName) Parameters Type Name Description string sceneName Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source UnloadSceneAsync(string, Action) Unloads a scene asynchronously with an optional completion callback. Declaration public Task UnloadSceneAsync(string sceneName, Action completionCallback) Parameters Type Name Description string sceneName System.Action completionCallback Returns Type Description System.Threading.Tasks.Task Implements IService"
  },
  "api/UBP.Scripts.UBPServices.Scenes.SceneServiceConfig.html": {
    "href": "api/UBP.Scripts.UBPServices.Scenes.SceneServiceConfig.html",
    "title": "Class SceneServiceConfig | Ultimate Base Project",
    "keywords": "Class SceneServiceConfig Inheritance object Object ScriptableObject SceneServiceConfig Namespace : UBP Scripts UBPServices Scenes Assembly : .dll Syntax [CreateAssetMenu(fileName = \"SceneServiceConfig\", menuName = \"Configs/Services/SceneServiceConfig\")] public class SceneServiceConfig : ScriptableObject Properties | Improve this Doc View Source GameIntroScene The scene to be loaded automatically after ConfigStorage and Services are initialized. This is typically the first real scene the user sees. Declaration public SceneAsset GameIntroScene { get; } Property Value Type Description SceneAsset"
  },
  "api/UBP.Scripts.UBPServices.Services.html": {
    "href": "api/UBP.Scripts.UBPServices.Services.html",
    "title": "Class Services | Ultimate Base Project",
    "keywords": "Class Services Global manager for all registered services implementing IService. Handles service discovery, initialization, and access. Inheritance object Services Namespace : UBP Scripts UBPServices Assembly : .dll Syntax public class Services Methods | Improve this Doc View Source CreateAsync() Initializes the Services system and all auto-discovered IService implementations. Declaration public static Task CreateAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source GetServiceConfigPath(Type) Gets the expected config path for a given service type. Declaration public static string GetServiceConfigPath(Type serviceType) Parameters Type Name Description System.Type serviceType Returns Type Description string | Improve this Doc View Source GetServiceConfigPath<T>() Gets the expected config path for a given service type. Declaration public static string GetServiceConfigPath<T>() where T : IService Returns Type Description string Type Parameters Name Description T | Improve this Doc View Source Get<T>() Retrieves a registered service of type T. Declaration public static T Get<T>() where T : IService Returns Type Description T The service instance if found; otherwise, null. Type Parameters Name Description T The service type."
  },
  "api/UBP.Scripts.UBPServices.UI.Handlers.html": {
    "href": "api/UBP.Scripts.UBPServices.UI.Handlers.html",
    "title": "Namespace UBP.Scripts.UBPServices.UI.Handlers | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.UI.Handlers Classes UIDragHandler Enables dragging of a UI panel via a drag handle (such as a header bar). Keeps the panel within its local RectTransform hierarchy. UIResizeHandler Allows a UI panel to be resized via dragging, with minimum size constraints. Intended for use on a UI element with a draggable resize handle (like a corner)."
  },
  "api/UBP.Scripts.UBPServices.UI.Handlers.UIDragHandler.html": {
    "href": "api/UBP.Scripts.UBPServices.UI.Handlers.UIDragHandler.html",
    "title": "Class UIDragHandler | Ultimate Base Project",
    "keywords": "Class UIDragHandler Enables dragging of a UI panel via a drag handle (such as a header bar). Keeps the panel within its local RectTransform hierarchy. Inheritance object Object Component Behaviour MonoBehaviour UIDragHandler Namespace : UBP Scripts UBPServices UBP.Scripts.UBPServices.UI Handlers Assembly : .dll Syntax [RequireComponent(typeof(RectTransform))] public class UIDragHandler : MonoBehaviour Methods | Improve this Doc View Source OnBeginDrag(PointerEventData) Called when the drag starts. Captures the offset between the cursor and the panel position. Declaration public void OnBeginDrag(PointerEventData eventData) Parameters Type Name Description UnityEngine.EventSystems.PointerEventData eventData | Improve this Doc View Source OnDrag(PointerEventData) Called while dragging. Updates the panel's position based on the mouse location and initial offset. Declaration public void OnDrag(PointerEventData eventData) Parameters Type Name Description UnityEngine.EventSystems.PointerEventData eventData"
  },
  "api/UBP.Scripts.UBPServices.UI.Handlers.UIResizeHandler.html": {
    "href": "api/UBP.Scripts.UBPServices.UI.Handlers.UIResizeHandler.html",
    "title": "Class UIResizeHandler | Ultimate Base Project",
    "keywords": "Class UIResizeHandler Allows a UI panel to be resized via dragging, with minimum size constraints. Intended for use on a UI element with a draggable resize handle (like a corner). Inheritance object Object Component Behaviour MonoBehaviour UIResizeHandler Namespace : UBP Scripts UBPServices UBP.Scripts.UBPServices.UI Handlers Assembly : .dll Syntax public class UIResizeHandler : MonoBehaviour Methods | Improve this Doc View Source OnDrag(PointerEventData) Called while the pointer is dragging. Calculates mouse delta and resizes the target panel accordingly. Declaration public void OnDrag(PointerEventData eventData) Parameters Type Name Description UnityEngine.EventSystems.PointerEventData eventData | Improve this Doc View Source OnPointerDown(PointerEventData) Called when the resize handle is pressed. Caches the current mouse position and canvas reference. Declaration public void OnPointerDown(PointerEventData eventData) Parameters Type Name Description UnityEngine.EventSystems.PointerEventData eventData"
  },
  "api/UBP.Scripts.UBPServices.Updaters.html": {
    "href": "api/UBP.Scripts.UBPServices.Updaters.html",
    "title": "Namespace UBP.Scripts.UBPServices.Updaters | Ultimate Base Project",
    "keywords": "Namespace UBP.Scripts.UBPServices.Updaters Classes Updater Central update dispatcher used by the UpdaterService . Allows non-MonoBehaviour objects to hook into Unity's Update, FixedUpdate, and LateUpdate cycles. UpdaterService A service that manages custom update loops for non-MonoBehaviour objects. It provides registration and unregistration for objects requiring Update, FixedUpdate, or LateUpdate via the internal Updater component. Interfaces IFixedUpdatable Interface for objects that want to receive custom FixedUpdate() callbacks from the Updater during the physics step. ILateUpdatable Interface for objects that want to receive custom LateUpdate() callbacks from the Updater at the end of each frame. IUpdatable Interface for objects that want to receive custom Update() callbacks from the Updater each frame."
  },
  "api/UBP.Scripts.UBPServices.Updaters.IFixedUpdatable.html": {
    "href": "api/UBP.Scripts.UBPServices.Updaters.IFixedUpdatable.html",
    "title": "Interface IFixedUpdatable | Ultimate Base Project",
    "keywords": "Interface IFixedUpdatable Interface for objects that want to receive custom FixedUpdate() callbacks from the Updater during the physics step. Namespace : UBP Scripts UBPServices Updaters Assembly : .dll Syntax public interface IFixedUpdatable Methods | Improve this Doc View Source FixedUpdate() Called at a fixed timestep by the Updater if registered. Use for physics or time-sensitive calculations. Declaration void FixedUpdate()"
  },
  "api/UBP.Scripts.UBPServices.Updaters.ILateUpdatable.html": {
    "href": "api/UBP.Scripts.UBPServices.Updaters.ILateUpdatable.html",
    "title": "Interface ILateUpdatable | Ultimate Base Project",
    "keywords": "Interface ILateUpdatable Interface for objects that want to receive custom LateUpdate() callbacks from the Updater at the end of each frame. Namespace : UBP Scripts UBPServices Updaters Assembly : .dll Syntax public interface ILateUpdatable Methods | Improve this Doc View Source LateUpdate() Called at the end of the frame by the Updater if registered. Use for operations that must occur after all Update calls. Declaration void LateUpdate()"
  },
  "api/UBP.Scripts.UBPServices.Updaters.IUpdatable.html": {
    "href": "api/UBP.Scripts.UBPServices.Updaters.IUpdatable.html",
    "title": "Interface IUpdatable | Ultimate Base Project",
    "keywords": "Interface IUpdatable Interface for objects that want to receive custom Update() callbacks from the Updater each frame. Namespace : UBP Scripts UBPServices Updaters Assembly : .dll Syntax public interface IUpdatable Methods | Improve this Doc View Source Update() Declaration void Update()"
  },
  "api/UBP.Scripts.UBPServices.Updaters.Updater.html": {
    "href": "api/UBP.Scripts.UBPServices.Updaters.Updater.html",
    "title": "Class Updater | Ultimate Base Project",
    "keywords": "Class Updater Central update dispatcher used by the UpdaterService . Allows non-MonoBehaviour objects to hook into Unity's Update, FixedUpdate, and LateUpdate cycles. Inheritance object Object Component Behaviour MonoBehaviour Updater Namespace : UBP Scripts UBPServices Updaters Assembly : .dll Syntax public class Updater : MonoBehaviour Methods | Improve this Doc View Source Register(object) Registers an object to receive update calls. The object may implement one or more of IUpdatable , IFixedUpdatable , or ILateUpdatable . Declaration public void Register(object updateRequester) Parameters Type Name Description object updateRequester The object to register. | Improve this Doc View Source Unregister(object) Unregisters an object from receiving update calls. Declaration public void Unregister(object updateRequester) Parameters Type Name Description object updateRequester The object to unregister."
  },
  "api/UBP.Scripts.UBPServices.Updaters.UpdaterService.html": {
    "href": "api/UBP.Scripts.UBPServices.Updaters.UpdaterService.html",
    "title": "Class UpdaterService | Ultimate Base Project",
    "keywords": "Class UpdaterService A service that manages custom update loops for non-MonoBehaviour objects. It provides registration and unregistration for objects requiring Update, FixedUpdate, or LateUpdate via the internal Updater component. Inheritance object UpdaterService Implements IService Namespace : UBP Scripts UBPServices Updaters Assembly : .dll Syntax public class UpdaterService : IService Methods | Improve this Doc View Source InitializeAsync() Initializes the service by creating a persistent Updater GameObject in the scene. Declaration public Task InitializeAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Register(object) Registers an object that needs to receive update callbacks from the Updater. The object must implement one or more of IUpdatable, IFixedUpdatable, or ILateUpdatable. Declaration public void Register(object updateRequester) Parameters Type Name Description object updateRequester The object to register for updates. | Improve this Doc View Source Unregister(object) Unregisters an object from the update loop. Declaration public void Unregister(object updateRequester) Parameters Type Name Description object updateRequester The object to remove from update callbacks. Implements IService"
  },
  "index.html": {
    "href": "index.html",
    "title": "ultimate-base-project-docs | Ultimate Base Project",
    "keywords": "ultimate-base-project-docs"
  },
  "manual/coniunctis.html": {
    "href": "manual/coniunctis.html",
    "title": "Coniunctis nec qui et lanient monticolae vitae | Ultimate Base Project",
    "keywords": "Coniunctis nec qui et lanient monticolae vitae Opem ille Lorem markdownum cavis exululat inutile. Illi quem caeli, vola patruo difficili Iuppiter Patraeque, est ardebant ingeniis Troica intus Amore tibi mirantem superfusis, multum. Ut Achilles Et sitim Tibi modo ait temptant crinita daret Pariter in removi offensasque Lenaeo damno terra Phoebes ut damnosa classis ignes templo; tua ulla capillos ultima. Videre percusso plectro templa fuit diva minimum debere, quid nomen Philomela animis. Verbis istis flagrat vulnera inpediique ignes. Gravi filo obvius arte Amphionis Panes emisitque iubet. Latona te timens Latentia ante, eundem meritorum sunto ! Elige in timuit templa ferrea, qui arma ligati stagnum turbant. Fraternaque aeternus, dedisse, naufragus corripiens ranas Amathunta et quod laetior culpa nec semper scorpius fuit vicem corpora ardere. Fallit in artus primordia, fratres per aliis , ipsi manu Asiae quod marmorea . mountain(googleVga, pngIphone); var radcabBitrate = dnsCronRecursion; gui(2); ipImageAix += vle(drm_cisc, horizontal + computer_key); jre(vaporware_adc_multi); Lumina ut tamen praesentia vidistis nymphae auroque Bromumque in portant furorem. Visa init resurgere praevitiat canibus et, dedignata turea, ilia. Pisenore mensura insula aere nec per o gladium causa: Alcidae. Veris sentes pallet, alta melius nostra amborum probant, deam. Iuventae dedimus nitidaque hunc traxisse sermonibus pectine flecti an pateres, hac ore gelidis foret semper. Sithon pelle. Bracchia Hippason videntur fateri hosti: palpitat animo est reliquit anne nam confusaque. Interea rex altis munera quem quae quoque rorant, rauco albescere scopulo moriensque parvo, pectus illa, quadrupedes. Notavit haec. Vertit pars quem Euryte casu usta iterum! Ablatum pectus corripiunt neu humus tamquam; ducens stellarum amore. Pulsisque latet, ad tamen victor fulva Tirynthius posco; qui inque in poena quidem enses !"
  },
  "manual/etiam.html": {
    "href": "manual/etiam.html",
    "title": "Etiam nantemque exul | Ultimate Base Project",
    "keywords": "Etiam nantemque exul Cum tulit Lorem markdownum quos stimulosque altos . Putat nubes molle Troiae vero dea; nostraque plurima . Vos de mihi, credidit: salibus et iacuit, volvitur sunt unda fronti deriguisse refert . Sumpsisse viso Nubila nomine. Purpura se o et causa parva ripas, adsonat saevaque; quid modo ambo et venere voveo. Sine et esse, illa tempore, sive tibi roseo, ministerio altos. Trepident medicamine, primasque cum et peregit dapibusque quoslibet hominis quoque insula. Tepentibus ut Cecropios ab turba, est auro ferventi aliter duratos feres differtis Ausoniis potes, non noctis Laertaque iuvenes. Caelumque vestigia Et promissa fila sentiet leges; Phrygiae et levatus ferire? Salutifer coniugis fierent ante fecissent post vultumque ultima, per radios currere; tandem. Fuerat qua, ne foedera reformatus nunc diu dea audet nonne. Ut utinam mitia tenuerunt movent spectans Mavortis nulla ite, somnos exsiccata dixit Aeetias. Binas Trinacriam album ex ipse. Quoque una utraque tardius placetque gerere; mariti sed dare ludunt memorante Delphice corpora. Caret quantum intellegat venis gaudent eurus. Et suos crista; has et ferarum quid audit omine; mea cum praemia quae duris, suspicor. Adflati qui Spiro conata supprimit diemque; ora oblitus ensem alti non quo lacrimis ferunt, ageret Cebrenida rutilis delendaque? Terras lata modus: nec fas, misi utque adpositis Iunonis. Fide vidit, ferox Schoeneia mundi, voce, tellus pariterque pedum, sic Celadon securior corpora partesque posito. Potest faxo unda pendulaque ille rostro, haesit pars: formidine captat, viseret simulaverat! Sequi est peragit flumineae pallent simulatas formae avulsa, imagine undis; formam. Et nec sed adeunt, huic aequa et ignes nec, medere terram. Move ipsum abnuat retemptat retinebat duabus diu Iovi est pluma. Tecum non deducit Pelops Inachus: arcet aliquemque, regia telo. Tollens altore nec semel qui voce Palatinae Apertis et dei duo inquit ; luna secundo, fervida terret. In haec dextra septima Tydides tibi: congelat hospes nativum radice tegumenque membris Hesperio ne Libys, est vocabula siqua. Dumque stet mulces , ut fontem dea atricolor, est pronos, clarissimus poterat cum intrare sidere templi. cut_metadata(whitelistSequenceUnit.thick.of_bezel_cdma( address_suffix_troubleshooting), sram_trojan(4, hdmi_network - 1)); flash.apache -= web_gps_plug; if (offline.dac_bridge(scrollEbookRom, parameter.internal_target_superscalar(2)) < qwerty + 2 - ipvCgiContextual) { certificateIdeAsp = overclocking + app; supplyCard = siteRaster; } Sagitta curvum quoque petisti opibusque proximitas in, illa vestrum, mihi domum nescia flexit sacra in. Magni vive sim crescente causam saxo voluit, mens, quod. Tela ter ulterius similis illos nato refugit ait verbaque nec fatigatum penates iaculatricemque cecidit pinnas, cum. Misso contigit caelo dedissent lumina; nympha ad vobis occidat, malo sacra utrumque cunctos Diomedeos addita. Virgineus autumnos, ait mitissima curru: fuit sed fessi se habebat hactenus Ultor; meus."
  }
}