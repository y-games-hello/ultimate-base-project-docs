### YamlMime:ManagedReference
items:
- uid: UBP.Scripts.Data.ConfigStorage
  commentId: T:UBP.Scripts.Data.ConfigStorage
  id: ConfigStorage
  parent: UBP.Scripts.Data
  children:
  - UBP.Scripts.Data.ConfigStorage.CreateAsync
  - UBP.Scripts.Data.ConfigStorage.GetConfig``1
  - UBP.Scripts.Data.ConfigStorage.GetConfigs``1
  langs:
  - csharp
  - vb
  name: ConfigStorage
  nameWithType: ConfigStorage
  fullName: UBP.Scripts.Data.ConfigStorage
  type: Class
  source:
    remote:
      path: Assets/UBP/Scripts/Data/ConfigStorage.cs
      branch: main
      repo: https://github.com/y-games-hello/ultimate-base-project.git
    id: ConfigStorage
    path: ../Assets/UBP/Scripts/Data/ConfigStorage.cs
    startLine: 13
  namespace: UBP.Scripts.Data
  summary: >-
    Singleton-based storage for all project configuration assets loaded at runtime.

    Automatically loads configs via the selected <xref href="UBP.Scripts.Data.IConfigLoader" data-throw-if-not-resolved="false"></xref> implementation.
  example: []
  syntax:
    content: public class ConfigStorage
    content.vb: Public Class ConfigStorage
  inheritance:
  - System.Object
- uid: UBP.Scripts.Data.ConfigStorage.CreateAsync
  commentId: M:UBP.Scripts.Data.ConfigStorage.CreateAsync
  id: CreateAsync
  parent: UBP.Scripts.Data.ConfigStorage
  langs:
  - csharp
  - vb
  name: CreateAsync()
  nameWithType: ConfigStorage.CreateAsync()
  fullName: UBP.Scripts.Data.ConfigStorage.CreateAsync()
  type: Method
  source:
    remote:
      path: Assets/UBP/Scripts/Data/ConfigStorage.cs
      branch: main
      repo: https://github.com/y-games-hello/ultimate-base-project.git
    id: CreateAsync
    path: ../Assets/UBP/Scripts/Data/ConfigStorage.cs
    startLine: 29
  namespace: UBP.Scripts.Data
  syntax:
    content: public static Task CreateAsync()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function CreateAsync() As Task
  overload: UBP.Scripts.Data.ConfigStorage.CreateAsync*
- uid: UBP.Scripts.Data.ConfigStorage.GetConfig``1
  commentId: M:UBP.Scripts.Data.ConfigStorage.GetConfig``1
  id: GetConfig``1
  parent: UBP.Scripts.Data.ConfigStorage
  langs:
  - csharp
  - vb
  name: GetConfig<T>()
  nameWithType: ConfigStorage.GetConfig<T>()
  fullName: UBP.Scripts.Data.ConfigStorage.GetConfig<T>()
  type: Method
  source:
    remote:
      path: Assets/UBP/Scripts/Data/ConfigStorage.cs
      branch: main
      repo: https://github.com/y-games-hello/ultimate-base-project.git
    id: GetConfig
    path: ../Assets/UBP/Scripts/Data/ConfigStorage.cs
    startLine: 109
  namespace: UBP.Scripts.Data
  summary: Returns the first config of type <code class="typeparamref">T</code> if available.
  example: []
  syntax:
    content: 'public static T GetConfig<T>() where T : ScriptableObject'
    typeParameters:
    - id: T
      description: The type of the config to retrieve.
    return:
      type: '{T}'
      description: The config instance, or <code>null</code> if not found.
    content.vb: Public Shared Function GetConfig(Of T As ScriptableObject)() As T
  overload: UBP.Scripts.Data.ConfigStorage.GetConfig*
  nameWithType.vb: ConfigStorage.GetConfig(Of T)()
  fullName.vb: UBP.Scripts.Data.ConfigStorage.GetConfig(Of T)()
  name.vb: GetConfig(Of T)()
- uid: UBP.Scripts.Data.ConfigStorage.GetConfigs``1
  commentId: M:UBP.Scripts.Data.ConfigStorage.GetConfigs``1
  id: GetConfigs``1
  parent: UBP.Scripts.Data.ConfigStorage
  langs:
  - csharp
  - vb
  name: GetConfigs<T>()
  nameWithType: ConfigStorage.GetConfigs<T>()
  fullName: UBP.Scripts.Data.ConfigStorage.GetConfigs<T>()
  type: Method
  source:
    remote:
      path: Assets/UBP/Scripts/Data/ConfigStorage.cs
      branch: main
      repo: https://github.com/y-games-hello/ultimate-base-project.git
    id: GetConfigs
    path: ../Assets/UBP/Scripts/Data/ConfigStorage.cs
    startLine: 125
  namespace: UBP.Scripts.Data
  summary: Returns all configs of type <code class="typeparamref">T</code> found in the cache.
  example: []
  syntax:
    content: 'public static List<T> GetConfigs<T>() where T : ScriptableObject'
    typeParameters:
    - id: T
      description: The type of the configs to retrieve.
    return:
      type: System.Collections.Generic.List{{T}}
      description: A list of matching config instances.
    content.vb: Public Shared Function GetConfigs(Of T As ScriptableObject)() As List(Of T)
  overload: UBP.Scripts.Data.ConfigStorage.GetConfigs*
  nameWithType.vb: ConfigStorage.GetConfigs(Of T)()
  fullName.vb: UBP.Scripts.Data.ConfigStorage.GetConfigs(Of T)()
  name.vb: GetConfigs(Of T)()
references:
- uid: UBP.Scripts.Data.IConfigLoader
  commentId: T:UBP.Scripts.Data.IConfigLoader
  parent: UBP.Scripts.Data
  href: UBP.Scripts.Data.IConfigLoader.html
  name: IConfigLoader
  nameWithType: IConfigLoader
  fullName: UBP.Scripts.Data.IConfigLoader
- uid: UBP.Scripts.Data
  commentId: N:UBP.Scripts.Data
  href: UBP.html
  name: UBP.Scripts.Data
  nameWithType: UBP.Scripts.Data
  fullName: UBP.Scripts.Data
  spec.csharp:
  - uid: UBP
    name: UBP
    href: UBP.html
  - name: .
  - uid: UBP.Scripts
    name: Scripts
    href: UBP.Scripts.html
  - name: .
  - uid: UBP.Scripts.Data
    name: Data
    href: UBP.Scripts.Data.html
  spec.vb:
  - uid: UBP
    name: UBP
    href: UBP.html
  - name: .
  - uid: UBP.Scripts
    name: Scripts
    href: UBP.Scripts.html
  - name: .
  - uid: UBP.Scripts.Data
    name: Data
    href: UBP.Scripts.Data.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UBP.Scripts.Data.ConfigStorage.CreateAsync*
  commentId: Overload:UBP.Scripts.Data.ConfigStorage.CreateAsync
  href: UBP.Scripts.Data.ConfigStorage.html#UBP_Scripts_Data_ConfigStorage_CreateAsync
  name: CreateAsync
  nameWithType: ConfigStorage.CreateAsync
  fullName: UBP.Scripts.Data.ConfigStorage.CreateAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
- uid: UBP.Scripts.Data.ConfigStorage.GetConfig*
  commentId: Overload:UBP.Scripts.Data.ConfigStorage.GetConfig
  href: UBP.Scripts.Data.ConfigStorage.html#UBP_Scripts_Data_ConfigStorage_GetConfig__1
  name: GetConfig
  nameWithType: ConfigStorage.GetConfig
  fullName: UBP.Scripts.Data.ConfigStorage.GetConfig
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: UBP.Scripts.Data.ConfigStorage.GetConfigs*
  commentId: Overload:UBP.Scripts.Data.ConfigStorage.GetConfigs
  href: UBP.Scripts.Data.ConfigStorage.html#UBP_Scripts_Data_ConfigStorage_GetConfigs__1
  name: GetConfigs
  nameWithType: ConfigStorage.GetConfigs
  fullName: UBP.Scripts.Data.ConfigStorage.GetConfigs
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
